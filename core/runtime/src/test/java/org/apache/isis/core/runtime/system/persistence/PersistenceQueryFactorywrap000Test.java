/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
package org.apache.isis.core.runtime.system.persistence;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.deeptestutils.CompareWithFieldList;
import com.diffblue.deeptestutils.Reflector;

@org.junit.runner.RunWith(org.powermock.modules.junit4.PowerMockRunner.class)
public class PersistenceQueryFactorywrap000Test {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: org/apache/isis/core/runtime/system/persistence/PersistenceQueryFactory.java */
  /*
   * Test generated by Diffblue Deeptest.
   * This test covers `java.util.Map wrap(java.util.Map)' block 2 (line 78)
   * This test covers `java.util.Map wrap(java.util.Map)' block 3 (line 78)
   * This test covers `java.util.Map wrap(java.util.Map)' block 4 (line 79)
   * This test covers `java.util.Map wrap(java.util.Map)' block 5 (line 79)
   * This test covers `java.util.Map wrap(java.util.Map)' block 6 (line 79)
   * This test covers `java.util.Map wrap(java.util.Map)' block 7 (line 79)
   * This test covers `java.util.Map wrap(java.util.Map)' block 8 (line 79)
   * This test covers `java.util.Map wrap(java.util.Map)' block 9 (line 85)
   * This test covers `java.util.Map wrap(java.util.Map)' block 25 (line 85)

   */
  @org.powermock.core.classloader.annotations.PrepareForTest( { com.google.common.collect.Maps.class } )
  @Test
  public void org_apache_isis_core_runtime_system_persistence_PersistenceQueryFactory_wrap_000_f89a9e7fd00aa834() throws Throwable {

    java.util.Map<String, org.apache.isis.core.metamodel.adapter.ObjectAdapter> retval;
    {
      /* Setup mocks */
      org.powermock.api.mockito.PowerMockito.mockStatic(com.google.common.collect.Maps.class);
      final java.util.ArrayList com_google_common_collect_Maps_newHashMap_answer_list = new java.util.ArrayList();
      final java.util.ArrayList<Object[]> com_google_common_collect_Maps_newHashMap_expectation_list = new java.util.ArrayList<Object[]>();
      final com.diffblue.deeptestutils.IterAnswer com_google_common_collect_Maps_newHashMap_answer_object = new com.diffblue.deeptestutils.IterAnswer("com.google.common.collect.Maps", "newHashMap", com_google_common_collect_Maps_newHashMap_answer_list, com_google_common_collect_Maps_newHashMap_expectation_list);
      com_google_common_collect_Maps_newHashMap_answer_list.add(null);
      org.mockito.Mockito.when(com.google.common.collect.Maps.newHashMap()).thenAnswer(com_google_common_collect_Maps_newHashMap_answer_object);

      /* Arrange */
      org.apache.isis.core.runtime.system.persistence.PersistenceQueryFactory param_4 = (org.apache.isis.core.runtime.system.persistence.PersistenceQueryFactory) Reflector.getInstance("org.apache.isis.core.runtime.system.persistence.PersistenceQueryFactory");
      org.apache.isis.core.metamodel.adapter.mgr.AdapterManager adapterManager = (org.apache.isis.core.metamodel.adapter.mgr.AdapterManager) Reflector.getInstance("org.apache.isis.core.metamodel.adapter.mgr.AdapterManager");
      Reflector.setField(param_4, "adapterManager", adapterManager);
      org.apache.isis.core.metamodel.specloader.SpecificationLoader specificationLoader = (org.apache.isis.core.metamodel.specloader.SpecificationLoader) Reflector.getInstance("org.apache.isis.core.metamodel.specloader.SpecificationLoader");
      Reflector.setField(param_4, "specificationLoader", specificationLoader);
      java.util.HashMap argumentsByParameterName = new java.util.HashMap();

      /* Act */
      Class<?> c = Reflector.forName("org.apache.isis.core.runtime.system.persistence.PersistenceQueryFactory");
      Method m = c.getDeclaredMethod("wrap", Reflector.forName("java.util.Map"));
      m.setAccessible(true);
      retval = (java.util.Map<String, org.apache.isis.core.metamodel.adapter.ObjectAdapter>) m.invoke(param_4, argumentsByParameterName);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }
}
