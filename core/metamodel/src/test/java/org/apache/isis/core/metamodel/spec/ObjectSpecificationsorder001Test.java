/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
package org.apache.isis.core.metamodel.spec;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.deeptestutils.CompareWithFieldList;
import com.diffblue.deeptestutils.Reflector;

public class ObjectSpecificationsorder001Test {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: org/apache/isis/core/metamodel/spec/ObjectSpecifications.java */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 72 branch to line 72

   * conditional line 72 branch to line 72
   * conditional line 73 branch to line 73
   * conditional line 73 branch to line 75
   * conditional line 75 branch to line 75
   * conditional line 76 branch to line 76
   * conditional line 76 branch to line 78

   * conditional line 72 branch to line 80
   */

  @Test
  public void org_apache_isis_core_metamodel_spec_ObjectSpecifications_order_001_672b722b884486bc() throws Throwable {

    java.util.List<String> retval;
    {
      /* Arrange */
      java.util.ArrayList valuesToOrder = new java.util.ArrayList();
      valuesToOrder.add("??");
      java.util.ArrayList valuesInRequiredOrder = new java.util.ArrayList();
      valuesInRequiredOrder.add("??");

      /* Act */
      Class<?> c = Reflector.forName("org.apache.isis.core.metamodel.spec.ObjectSpecifications");
      Method m = c.getDeclaredMethod("order", Reflector.forName("java.util.List"), Reflector.forName("java.util.List"));
      m.setAccessible(true);
      retval = (java.util.List<String>) m.invoke(null, valuesToOrder, valuesInRequiredOrder);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      java.util.ArrayList arrayList = new java.util.ArrayList();
      arrayList.add("??");
      Assert.assertEquals(arrayList, retval);
    }
  }
}
