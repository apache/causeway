/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
package org.apache.isis.viewer.restfulobjects.rendering.service.conneg;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.deeptestutils.CompareWithFieldList;
import com.diffblue.deeptestutils.Reflector;

public class ContentNegotiationServiceAbstractsanitize000Test {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: org/apache/isis/viewer/restfulobjects/rendering/service/conneg/ContentNegotiationServiceAbstract.java */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 145 branch to line 148
   * conditional line 149 branch to line 150
   * conditional line 150 branch to line 150
   * conditional line 152 branch to line 155
   */

  @Test
  public void org_apache_isis_viewer_restfulobjects_rendering_service_conneg_ContentNegotiationServiceAbstract_sanitize_000_bff9a43970768adc() throws Throwable {

    String retval;
    {
      /* Arrange */
      org.apache.isis.viewer.restfulobjects.rendering.service.conneg.ContentNegotiationServiceOrgApacheIsisV1 param_3 = (org.apache.isis.viewer.restfulobjects.rendering.service.conneg.ContentNegotiationServiceOrgApacheIsisV1) Reflector.getInstance("org.apache.isis.viewer.restfulobjects.rendering.service.conneg.ContentNegotiationServiceOrgApacheIsisV1");
      org.apache.isis.viewer.restfulobjects.rendering.service.conneg.ContentNegotiationServiceForRestfulObjectsV1_0 contentNegotiationServiceForRestfulObjectsV1_0 = (org.apache.isis.viewer.restfulobjects.rendering.service.conneg.ContentNegotiationServiceForRestfulObjectsV1_0) Reflector.getInstance("org.apache.isis.viewer.restfulobjects.rendering.service.conneg.ContentNegotiationServiceForRestfulObjectsV1_0");
      Reflector.setField(contentNegotiationServiceForRestfulObjectsV1_0, "strictAcceptChecking", false);
      Reflector.setField(param_3, "restfulObjectsV1_0", contentNegotiationServiceForRestfulObjectsV1_0);
      Reflector.setField(param_3, "container", null);
      String mediaParam = " \'   !!!! ";

      /* Act */
      Class<?> c = Reflector.forName("org.apache.isis.viewer.restfulobjects.rendering.service.conneg.ContentNegotiationServiceAbstract");
      Method m = c.getDeclaredMethod("sanitize", Reflector.forName("java.lang.String"));
      m.setAccessible(true);
      retval = (String) m.invoke(param_3, mediaParam);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals("   !!!!", retval);
    }
  }
}
