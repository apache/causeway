/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
package org.apache.isis.viewer.restfulobjects.server;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.deeptestutils.CompareWithFieldList;
import com.diffblue.deeptestutils.Reflector;

@org.junit.runner.RunWith(org.powermock.modules.junit4.PowerMockRunner.class)
public class ResourceContextstripQuotes002Test {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: org/apache/isis/viewer/restfulobjects/server/ResourceContext.java */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 202 branch to line 205
   * conditional line 205 branch to line 208
   */
  @org.powermock.core.classloader.annotations.PrepareForTest( { com.google.common.base.Strings.class } )
  @Test
  public void org_apache_isis_viewer_restfulobjects_server_ResourceContext_stripQuotes_002_d57510920a2e3cc3() throws Throwable {

    String retval;
    {
      /* Setup mocks */
      org.powermock.api.mockito.PowerMockito.mockStatic(com.google.common.base.Strings.class);
      final java.util.ArrayList com_google_common_base_Strings_isNullOrEmpty_String_answer_list = new java.util.ArrayList();
      final java.util.ArrayList<Object[]> com_google_common_base_Strings_isNullOrEmpty_String_expectation_list = new java.util.ArrayList<Object[]>();
      final com.diffblue.deeptestutils.IterAnswer com_google_common_base_Strings_isNullOrEmpty_String_answer_object = new com.diffblue.deeptestutils.IterAnswer("com.google.common.base.Strings", "isNullOrEmpty", com_google_common_base_Strings_isNullOrEmpty_String_answer_list, com_google_common_base_Strings_isNullOrEmpty_String_expectation_list);
      com_google_common_base_Strings_isNullOrEmpty_String_answer_list.add(false);
      org.mockito.Mockito.when(com.google.common.base.Strings.isNullOrEmpty(org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class)))).thenAnswer(com_google_common_base_Strings_isNullOrEmpty_String_answer_object);

      /* Arrange */
      String str = "#*+\"&2\"\"\"b";

      /* Act */
      Class<?> c = Reflector.forName("org.apache.isis.viewer.restfulobjects.server.ResourceContext");
      Method m = c.getDeclaredMethod("stripQuotes", Reflector.forName("java.lang.String"));
      m.setAccessible(true);
      retval = (String) m.invoke(null, str);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals("#*+\"&2\"\"\"b", retval);
    }
  }
}
