schema {
  query: SimpleAndRich
  mutation: Mutation
}

"This directive allows results to be deferred during execution"
directive @defer(
    "Deferred behaviour is controlled by this argument"
    if: Boolean! = true,
    "A unique label that represents the fragment being deferred"
    label: String
  ) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String! = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"This directive disables error propagation when a non nullable field returns null for the given operation."
directive @experimental_disableErrorPropagation on QUERY | MUTATION | SUBSCRIPTION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Indicates an Input Object is a OneOf Input Object."
directive @oneOf on INPUT_OBJECT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

type Mutation {
  causeway_conf_ConfigurationProperty__key(_target: rich__causeway_conf_ConfigurationProperty__gqlv_input, key: String!): rich__causeway_conf_ConfigurationProperty
  causeway_conf_ConfigurationProperty__value(_target: rich__causeway_conf_ConfigurationProperty__gqlv_input, value: String!): rich__causeway_conf_ConfigurationProperty
  causeway_testing_fixtures_FixtureResult__fixtureScriptClassName(_target: rich__causeway_testing_fixtures_FixtureResult__gqlv_input, fixtureScriptClassName: String): rich__causeway_testing_fixtures_FixtureResult
  causeway_testing_fixtures_FixtureResult__key(_target: rich__causeway_testing_fixtures_FixtureResult__gqlv_input, key: String!): rich__causeway_testing_fixtures_FixtureResult
  causeway_testing_fixtures_FixtureResult__object(_target: rich__causeway_testing_fixtures_FixtureResult__gqlv_input, object: String!): rich__causeway_testing_fixtures_FixtureResult
  org_apache_causeway_core_metamodel_inspect_model_MMNode__details(_target: rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__gqlv_input): String
  org_apache_causeway_core_metamodel_inspect_model_MMNode__putDetails(_target: rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__gqlv_input, details: String!): String
  org_apache_causeway_core_metamodel_inspect_model_MMNode__streamChildNodes(_target: rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__gqlv_input): rich__java_util_stream_Stream
  org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript__friendlyName(_target: rich__org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript__gqlv_input, friendlyName: String!): rich__org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript
  university_admin_AdminMenu__actionWithDisabledParam(firstParam: String!, secondParam: String!, thirdParameter: String!): String
  university_admin_AdminMenu__actionWithHiddenParam(firstParam: String!, secondParam: String!): String
  university_admin_AdminMenu__adminAction: String
  university_admin_AdminMenu__otherAdminAction: String
  university_dept_Department__addStaffMember(_target: rich__university_dept_Department__gqlv_input, staffMember: rich__university_dept_StaffMember__gqlv_input!): rich__university_dept_Department
  university_dept_Department__addStaffMembers(_target: rich__university_dept_Department__gqlv_input, staffMembers: [rich__university_dept_StaffMember__gqlv_input]): rich__university_dept_Department
  university_dept_Department__changeDeptHead(_target: rich__university_dept_Department__gqlv_input, newDeptHead: rich__university_dept_DeptHead__gqlv_input!): rich__university_dept_Department
  university_dept_Department__changeName(_target: rich__university_dept_Department__gqlv_input, newName: String!): rich__university_dept_Department
  university_dept_Department__deptHead(_target: rich__university_dept_Department__gqlv_input, deptHead: rich__university_dept_DeptHead__gqlv_input): rich__university_dept_Department
  university_dept_Department__name(_target: rich__university_dept_Department__gqlv_input, name: String!): rich__university_dept_Department
  university_dept_Department__removeStaffMember(_target: rich__university_dept_Department__gqlv_input, staffMember: rich__university_dept_StaffMember__gqlv_input!): rich__university_dept_Department
  university_dept_Departments__createDepartment(deptHead: rich__university_dept_DeptHead__gqlv_input, name: String!): rich__university_dept_Department
  university_dept_DeptHead__changeDepartment(_target: rich__university_dept_DeptHead__gqlv_input, department: rich__university_dept_Department__gqlv_input!): rich__university_dept_DeptHead
  university_dept_DeptHead__changeName(_target: rich__university_dept_DeptHead__gqlv_input, newName: String!): rich__university_dept_DeptHead
  university_dept_DeptHead__department(_target: rich__university_dept_DeptHead__gqlv_input, department: rich__university_dept_Department__gqlv_input): rich__university_dept_DeptHead
  university_dept_DeptHead__name(_target: rich__university_dept_DeptHead__gqlv_input, name: String): rich__university_dept_DeptHead
  university_dept_StaffMember__department(_target: rich__university_dept_StaffMember__gqlv_input, department: rich__university_dept_Department__gqlv_input): rich__university_dept_StaffMember
  university_dept_StaffMember__grade(_target: rich__university_dept_StaffMember__gqlv_input, grade: rich__org_apache_causeway_viewer_graphql_viewer_test_domain_dept_Grade__gqlv_enum!): rich__university_dept_StaffMember
  university_dept_StaffMember__name(_target: rich__university_dept_StaffMember__gqlv_input, name: String!): rich__university_dept_StaffMember
  university_dept_StaffMember__photo(_target: rich__university_dept_StaffMember__gqlv_input, photo: String): rich__university_dept_StaffMember
  university_dept_Staff__createStaffMember(department: rich__university_dept_Department__gqlv_input!, name: String!): rich__university_dept_StaffMember
}

type RICHSchema {
  Scenario(name: String): Scenario
  causeway_applib_DomainObjectList(object: rich__causeway_applib_DomainObjectList__gqlv_input): rich__causeway_applib_DomainObjectList
  causeway_applib_MetamodelInspectView(object: rich__causeway_applib_MetamodelInspectView__gqlv_input): rich__causeway_applib_MetamodelInspectView
  causeway_applib_RoleMemento(object: rich__causeway_applib_RoleMemento__gqlv_input): rich__causeway_applib_RoleMemento
  causeway_applib_UserMemento(object: rich__causeway_applib_UserMemento__gqlv_input): rich__causeway_applib_UserMemento
  causeway_applib_UserMenu: rich__causeway_applib_UserMenu
  causeway_conf_ConfigurationMenu: rich__causeway_conf_ConfigurationMenu
  causeway_conf_ConfigurationProperty(object: rich__causeway_conf_ConfigurationProperty__gqlv_input): rich__causeway_conf_ConfigurationProperty
  causeway_conf_ConfigurationViewmodel(object: rich__causeway_conf_ConfigurationViewmodel__gqlv_input): rich__causeway_conf_ConfigurationViewmodel
  causeway_feat_ApplicationFeatureViewModel(object: rich__causeway_feat_ApplicationFeatureViewModel__gqlv_input): rich__causeway_feat_ApplicationFeatureViewModel
  causeway_feat_ApplicationNamespace(object: rich__causeway_feat_ApplicationNamespace__gqlv_input): rich__causeway_feat_ApplicationNamespace
  causeway_feat_ApplicationType(object: rich__causeway_feat_ApplicationType__gqlv_input): rich__causeway_feat_ApplicationType
  causeway_feat_ApplicationTypeAction(object: rich__causeway_feat_ApplicationTypeAction__gqlv_input): rich__causeway_feat_ApplicationTypeAction
  causeway_feat_ApplicationTypeCollection(object: rich__causeway_feat_ApplicationTypeCollection__gqlv_input): rich__causeway_feat_ApplicationTypeCollection
  causeway_feat_ApplicationTypeMember(object: rich__causeway_feat_ApplicationTypeMember__gqlv_input): rich__causeway_feat_ApplicationTypeMember
  causeway_feat_ApplicationTypeProperty(object: rich__causeway_feat_ApplicationTypeProperty__gqlv_input): rich__causeway_feat_ApplicationTypeProperty
  causeway_security_LoginRedirect(object: rich__causeway_security_LoginRedirect__gqlv_input): rich__causeway_security_LoginRedirect
  causeway_security_LogoutMenu: rich__causeway_security_LogoutMenu
  causeway_testing_fixtures_FixtureResult(object: rich__causeway_testing_fixtures_FixtureResult__gqlv_input): rich__causeway_testing_fixtures_FixtureResult
  java_lang_Record(object: rich__java_lang_Record__gqlv_input): rich__java_lang_Record
  java_lang_Runnable(object: rich__java_lang_Runnable__gqlv_input): rich__java_lang_Runnable
  java_util_concurrent_Callable(object: rich__java_util_concurrent_Callable__gqlv_input): rich__java_util_concurrent_Callable
  java_util_function_Consumer(object: rich__java_util_function_Consumer__gqlv_input): rich__java_util_function_Consumer
  java_util_function_Function(object: rich__java_util_function_Function__gqlv_input): rich__java_util_function_Function
  java_util_stream_Stream(object: rich__java_util_stream_Stream__gqlv_input): rich__java_util_stream_Stream
  org_apache_causeway_applib_graph_tree_MasterDetailTreeView(object: rich__org_apache_causeway_applib_graph_tree_MasterDetailTreeView__gqlv_input): rich__org_apache_causeway_applib_graph_tree_MasterDetailTreeView
  org_apache_causeway_core_metamodel_inspect_model_MMNode(object: rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__gqlv_input): rich__org_apache_causeway_core_metamodel_inspect_model_MMNode
  org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript(object: rich__org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript__gqlv_input): rich__org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript
  university_admin_AdminMenu: rich__university_admin_AdminMenu
  university_calc_Calculator: rich__university_calc_Calculator
  university_calc_I18nCalculator: rich__university_calc_I18nCalculator
  university_calc_calculatorHyphenated: rich__university_calc_calculatorHyphenated
  university_dept_Department(object: rich__university_dept_Department__gqlv_input): rich__university_dept_Department
  university_dept_Departments: rich__university_dept_Departments
  university_dept_DeptHead(object: rich__university_dept_DeptHead__gqlv_input): rich__university_dept_DeptHead
  university_dept_DeptHeads: rich__university_dept_DeptHeads
  university_dept_People: rich__university_dept_People
  university_dept_Person(object: rich__university_dept_Person__gqlv_input): rich__university_dept_Person
  university_dept_Staff: rich__university_dept_Staff
  university_dept_StaffMember(object: rich__university_dept_StaffMember__gqlv_input): rich__university_dept_StaffMember
}

type SIMPLESchema {
  causeway_applib_DomainObjectList(object: simple__causeway_applib_DomainObjectList__gqlv_input): simple__causeway_applib_DomainObjectList
  causeway_applib_MetamodelInspectView(object: simple__causeway_applib_MetamodelInspectView__gqlv_input): simple__causeway_applib_MetamodelInspectView
  causeway_applib_RoleMemento(object: simple__causeway_applib_RoleMemento__gqlv_input): simple__causeway_applib_RoleMemento
  causeway_applib_UserMemento(object: simple__causeway_applib_UserMemento__gqlv_input): simple__causeway_applib_UserMemento
  causeway_applib_UserMenu: simple__causeway_applib_UserMenu
  causeway_conf_ConfigurationMenu: simple__causeway_conf_ConfigurationMenu
  causeway_conf_ConfigurationProperty(object: simple__causeway_conf_ConfigurationProperty__gqlv_input): simple__causeway_conf_ConfigurationProperty
  causeway_conf_ConfigurationViewmodel(object: simple__causeway_conf_ConfigurationViewmodel__gqlv_input): simple__causeway_conf_ConfigurationViewmodel
  causeway_feat_ApplicationFeatureViewModel(object: simple__causeway_feat_ApplicationFeatureViewModel__gqlv_input): simple__causeway_feat_ApplicationFeatureViewModel
  causeway_feat_ApplicationNamespace(object: simple__causeway_feat_ApplicationNamespace__gqlv_input): simple__causeway_feat_ApplicationNamespace
  causeway_feat_ApplicationType(object: simple__causeway_feat_ApplicationType__gqlv_input): simple__causeway_feat_ApplicationType
  causeway_feat_ApplicationTypeAction(object: simple__causeway_feat_ApplicationTypeAction__gqlv_input): simple__causeway_feat_ApplicationTypeAction
  causeway_feat_ApplicationTypeCollection(object: simple__causeway_feat_ApplicationTypeCollection__gqlv_input): simple__causeway_feat_ApplicationTypeCollection
  causeway_feat_ApplicationTypeMember(object: simple__causeway_feat_ApplicationTypeMember__gqlv_input): simple__causeway_feat_ApplicationTypeMember
  causeway_feat_ApplicationTypeProperty(object: simple__causeway_feat_ApplicationTypeProperty__gqlv_input): simple__causeway_feat_ApplicationTypeProperty
  causeway_security_LoginRedirect(object: simple__causeway_security_LoginRedirect__gqlv_input): simple__causeway_security_LoginRedirect
  causeway_security_LogoutMenu: simple__causeway_security_LogoutMenu
  causeway_testing_fixtures_FixtureResult(object: simple__causeway_testing_fixtures_FixtureResult__gqlv_input): simple__causeway_testing_fixtures_FixtureResult
  java_lang_Record(object: simple__java_lang_Record__gqlv_input): simple__java_lang_Record
  java_lang_Runnable(object: simple__java_lang_Runnable__gqlv_input): simple__java_lang_Runnable
  java_util_concurrent_Callable(object: simple__java_util_concurrent_Callable__gqlv_input): simple__java_util_concurrent_Callable
  java_util_function_Consumer(object: simple__java_util_function_Consumer__gqlv_input): simple__java_util_function_Consumer
  java_util_function_Function(object: simple__java_util_function_Function__gqlv_input): simple__java_util_function_Function
  java_util_stream_Stream(object: simple__java_util_stream_Stream__gqlv_input): simple__java_util_stream_Stream
  org_apache_causeway_applib_graph_tree_MasterDetailTreeView(object: simple__org_apache_causeway_applib_graph_tree_MasterDetailTreeView__gqlv_input): simple__org_apache_causeway_applib_graph_tree_MasterDetailTreeView
  org_apache_causeway_core_metamodel_inspect_model_MMNode(object: simple__org_apache_causeway_core_metamodel_inspect_model_MMNode__gqlv_input): simple__org_apache_causeway_core_metamodel_inspect_model_MMNode
  org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript(object: simple__org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript__gqlv_input): simple__org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript
  university_admin_AdminMenu: simple__university_admin_AdminMenu
  university_calc_Calculator: simple__university_calc_Calculator
  university_calc_I18nCalculator: simple__university_calc_I18nCalculator
  university_calc_calculatorHyphenated: simple__university_calc_calculatorHyphenated
  university_dept_Department(object: simple__university_dept_Department__gqlv_input): simple__university_dept_Department
  university_dept_Departments: simple__university_dept_Departments
  university_dept_DeptHead(object: simple__university_dept_DeptHead__gqlv_input): simple__university_dept_DeptHead
  university_dept_DeptHeads: simple__university_dept_DeptHeads
  university_dept_People: simple__university_dept_People
  university_dept_Person(object: simple__university_dept_Person__gqlv_input): simple__university_dept_Person
  university_dept_Staff: simple__university_dept_Staff
  university_dept_StaffMember(object: simple__university_dept_StaffMember__gqlv_input): simple__university_dept_StaffMember
}

type Scenario {
  "Given the system under test has this initial state"
  Given: ScenarioStep
  Name: String
  "Then the system has this resultant state"
  Then: ScenarioStep
  "When the system is changed in some particular way"
  When: ScenarioStep
}

type ScenarioStep {
  causeway_applib_DomainObjectList(object: rich__causeway_applib_DomainObjectList__gqlv_input): rich__causeway_applib_DomainObjectList
  causeway_applib_MetamodelInspectView(object: rich__causeway_applib_MetamodelInspectView__gqlv_input): rich__causeway_applib_MetamodelInspectView
  causeway_applib_RoleMemento(object: rich__causeway_applib_RoleMemento__gqlv_input): rich__causeway_applib_RoleMemento
  causeway_applib_UserMemento(object: rich__causeway_applib_UserMemento__gqlv_input): rich__causeway_applib_UserMemento
  causeway_applib_UserMenu: rich__causeway_applib_UserMenu
  causeway_conf_ConfigurationMenu: rich__causeway_conf_ConfigurationMenu
  causeway_conf_ConfigurationProperty(object: rich__causeway_conf_ConfigurationProperty__gqlv_input): rich__causeway_conf_ConfigurationProperty
  causeway_conf_ConfigurationViewmodel(object: rich__causeway_conf_ConfigurationViewmodel__gqlv_input): rich__causeway_conf_ConfigurationViewmodel
  causeway_feat_ApplicationFeatureViewModel(object: rich__causeway_feat_ApplicationFeatureViewModel__gqlv_input): rich__causeway_feat_ApplicationFeatureViewModel
  causeway_feat_ApplicationNamespace(object: rich__causeway_feat_ApplicationNamespace__gqlv_input): rich__causeway_feat_ApplicationNamespace
  causeway_feat_ApplicationType(object: rich__causeway_feat_ApplicationType__gqlv_input): rich__causeway_feat_ApplicationType
  causeway_feat_ApplicationTypeAction(object: rich__causeway_feat_ApplicationTypeAction__gqlv_input): rich__causeway_feat_ApplicationTypeAction
  causeway_feat_ApplicationTypeCollection(object: rich__causeway_feat_ApplicationTypeCollection__gqlv_input): rich__causeway_feat_ApplicationTypeCollection
  causeway_feat_ApplicationTypeMember(object: rich__causeway_feat_ApplicationTypeMember__gqlv_input): rich__causeway_feat_ApplicationTypeMember
  causeway_feat_ApplicationTypeProperty(object: rich__causeway_feat_ApplicationTypeProperty__gqlv_input): rich__causeway_feat_ApplicationTypeProperty
  causeway_security_LoginRedirect(object: rich__causeway_security_LoginRedirect__gqlv_input): rich__causeway_security_LoginRedirect
  causeway_security_LogoutMenu: rich__causeway_security_LogoutMenu
  causeway_testing_fixtures_FixtureResult(object: rich__causeway_testing_fixtures_FixtureResult__gqlv_input): rich__causeway_testing_fixtures_FixtureResult
  java_lang_Record(object: rich__java_lang_Record__gqlv_input): rich__java_lang_Record
  java_lang_Runnable(object: rich__java_lang_Runnable__gqlv_input): rich__java_lang_Runnable
  java_util_concurrent_Callable(object: rich__java_util_concurrent_Callable__gqlv_input): rich__java_util_concurrent_Callable
  java_util_function_Consumer(object: rich__java_util_function_Consumer__gqlv_input): rich__java_util_function_Consumer
  java_util_function_Function(object: rich__java_util_function_Function__gqlv_input): rich__java_util_function_Function
  java_util_stream_Stream(object: rich__java_util_stream_Stream__gqlv_input): rich__java_util_stream_Stream
  org_apache_causeway_applib_graph_tree_MasterDetailTreeView(object: rich__org_apache_causeway_applib_graph_tree_MasterDetailTreeView__gqlv_input): rich__org_apache_causeway_applib_graph_tree_MasterDetailTreeView
  org_apache_causeway_core_metamodel_inspect_model_MMNode(object: rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__gqlv_input): rich__org_apache_causeway_core_metamodel_inspect_model_MMNode
  org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript(object: rich__org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript__gqlv_input): rich__org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript
  university_admin_AdminMenu: rich__university_admin_AdminMenu
  university_calc_Calculator: rich__university_calc_Calculator
  university_calc_I18nCalculator: rich__university_calc_I18nCalculator
  university_calc_calculatorHyphenated: rich__university_calc_calculatorHyphenated
  university_dept_Department(object: rich__university_dept_Department__gqlv_input): rich__university_dept_Department
  university_dept_Departments: rich__university_dept_Departments
  university_dept_DeptHead(object: rich__university_dept_DeptHead__gqlv_input): rich__university_dept_DeptHead
  university_dept_DeptHeads: rich__university_dept_DeptHeads
  university_dept_People: rich__university_dept_People
  university_dept_Person(object: rich__university_dept_Person__gqlv_input): rich__university_dept_Person
  university_dept_Staff: rich__university_dept_Staff
  university_dept_StaffMember(object: rich__university_dept_StaffMember__gqlv_input): rich__university_dept_StaffMember
}

type SimpleAndRich {
  rich: RICHSchema
  simple: SIMPLESchema
}

type rich__causeway_applib_DomainObjectList {
  "Object metadata"
  _meta: rich__causeway_applib_DomainObjectList__gqlv_meta
  "Action Arguments"
  actionArguments: rich__causeway_applib_DomainObjectList__actionArguments__gqlv_property
  "Action Id"
  actionId: rich__causeway_applib_DomainObjectList__actionId__gqlv_property
  "Action Owning Fqcn"
  actionOwningFqcn: rich__causeway_applib_DomainObjectList__actionOwningFqcn__gqlv_property
  "Element Type Fqcn"
  elementTypeFqcn: rich__causeway_applib_DomainObjectList__elementTypeFqcn__gqlv_property
  "Objects"
  objects: rich__causeway_applib_DomainObjectList__objects__gqlv_collection
  "Title"
  title: rich__causeway_applib_DomainObjectList__title__gqlv_property
}

type rich__causeway_applib_DomainObjectList__actionArguments__gqlv_property {
  datatype: String
  disabled: String
  get: String
  hidden: Boolean
  set(actionArguments: String): rich__causeway_applib_DomainObjectList
  validate(actionArguments: String): String
}

type rich__causeway_applib_DomainObjectList__actionId__gqlv_property {
  datatype: String
  disabled: String
  get: String
  hidden: Boolean
  set(actionId: String): rich__causeway_applib_DomainObjectList
  validate(actionId: String): String
}

type rich__causeway_applib_DomainObjectList__actionOwningFqcn__gqlv_property {
  datatype: String
  disabled: String
  get: String
  hidden: Boolean
  set(actionOwningFqcn: String): rich__causeway_applib_DomainObjectList
  validate(actionOwningFqcn: String): String
}

type rich__causeway_applib_DomainObjectList__elementTypeFqcn__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(elementTypeFqcn: String!): rich__causeway_applib_DomainObjectList
  validate(elementTypeFqcn: String): String
}

type rich__causeway_applib_DomainObjectList__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__causeway_applib_DomainObjectList__objects__gqlv_collection {
  datatype: String
  disabled: String
  hidden: Boolean
}

type rich__causeway_applib_DomainObjectList__title__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(title: String!): rich__causeway_applib_DomainObjectList
  validate(title: String): String
}

type rich__causeway_applib_MetamodelInspectView {
  "Object metadata"
  _meta: rich__causeway_applib_MetamodelInspectView__gqlv_meta
  "Details"
  details: rich__causeway_applib_MetamodelInspectView__details__gqlv_property
  "Tree"
  tree: rich__causeway_applib_MetamodelInspectView__tree__gqlv_property
}

type rich__causeway_applib_MetamodelInspectView__details__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(details: String!): rich__causeway_applib_MetamodelInspectView
  validate(details: String): String
}

type rich__causeway_applib_MetamodelInspectView__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__causeway_applib_MetamodelInspectView__tree__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(tree: String!): rich__causeway_applib_MetamodelInspectView
  validate(tree: String): String
}

type rich__causeway_applib_RoleMemento {
  "Object metadata"
  _meta: rich__causeway_applib_RoleMemento__gqlv_meta
  "Description"
  description: rich__causeway_applib_RoleMemento__description__gqlv_property
  "Name"
  name: rich__causeway_applib_RoleMemento__name__gqlv_property
}

type rich__causeway_applib_RoleMemento__description__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(description: String!): rich__causeway_applib_RoleMemento
  validate(description: String): String
}

type rich__causeway_applib_RoleMemento__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__causeway_applib_RoleMemento__name__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(name: String!): rich__causeway_applib_RoleMemento
  validate(name: String): String
}

type rich__causeway_applib_UserMemento {
  "Object metadata"
  _meta: rich__causeway_applib_UserMemento__gqlv_meta
  "Authentication Code"
  authenticationCode: rich__causeway_applib_UserMemento__authenticationCode__gqlv_property
  "Authentication Source"
  authenticationSource: rich__causeway_applib_UserMemento__authenticationSource__gqlv_property
  "Avatar Url"
  avatarUrl: rich__causeway_applib_UserMemento__avatarUrl__gqlv_property
  "impersonating"
  isImpersonating: rich__causeway_applib_UserMemento__isImpersonating__gqlv_property
  "Language Locale"
  languageLocale: rich__causeway_applib_UserMemento__languageLocale__gqlv_property
  "tenancy (or tenancies) this user has access to"
  multiTenancyToken: rich__causeway_applib_UserMemento__multiTenancyToken__gqlv_property
  "user's login name"
  name: rich__causeway_applib_UserMemento__name__gqlv_property
  "Number Format Locale"
  numberFormatLocale: rich__causeway_applib_UserMemento__numberFormatLocale__gqlv_property
  "Real Name"
  realName: rich__causeway_applib_UserMemento__realName__gqlv_property
  "roles associated with this user"
  roles: rich__causeway_applib_UserMemento__roles__gqlv_collection
  "Time Format Locale"
  timeFormatLocale: rich__causeway_applib_UserMemento__timeFormatLocale__gqlv_property
}

type rich__causeway_applib_UserMemento__authenticationCode__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(authenticationCode: String!): rich__causeway_applib_UserMemento
  validate(authenticationCode: String): String
}

type rich__causeway_applib_UserMemento__authenticationSource__gqlv_property {
  choices(authenticationSource: rich__org_apache_causeway_applib_services_user_UserMemento_AuthenticationSource__gqlv_enum): [rich__org_apache_causeway_applib_services_user_UserMemento_AuthenticationSource__gqlv_enum]
  datatype: String
  disabled: String
  get: rich__org_apache_causeway_applib_services_user_UserMemento_AuthenticationSource__gqlv_enum!
  hidden: Boolean
  set(authenticationSource: rich__org_apache_causeway_applib_services_user_UserMemento_AuthenticationSource__gqlv_enum!): rich__causeway_applib_UserMemento
  validate(authenticationSource: rich__org_apache_causeway_applib_services_user_UserMemento_AuthenticationSource__gqlv_enum): String
}

type rich__causeway_applib_UserMemento__avatarUrl__gqlv_property {
  datatype: String
  disabled: String
  get: String
  hidden: Boolean
  set(avatarUrl: String): rich__causeway_applib_UserMemento
  validate(avatarUrl: String): String
}

type rich__causeway_applib_UserMemento__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__causeway_applib_UserMemento__isImpersonating__gqlv_property {
  datatype: String
  disabled: String
  get: Boolean!
  hidden: Boolean
  set(isImpersonating: Boolean!): rich__causeway_applib_UserMemento
  validate(isImpersonating: Boolean): String
}

type rich__causeway_applib_UserMemento__languageLocale__gqlv_property {
  datatype: String
  disabled: String
  get: String
  hidden: Boolean
  set(languageLocale: String): rich__causeway_applib_UserMemento
  validate(languageLocale: String): String
}

"tenancy (or tenancies) this user has access to"
type rich__causeway_applib_UserMemento__multiTenancyToken__gqlv_property {
  datatype: String
  disabled: String
  get: String
  hidden: Boolean
  set(multiTenancyToken: String): rich__causeway_applib_UserMemento
  validate(multiTenancyToken: String): String
}

"user's login name"
type rich__causeway_applib_UserMemento__name__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(name: String!): rich__causeway_applib_UserMemento
  validate(name: String): String
}

type rich__causeway_applib_UserMemento__numberFormatLocale__gqlv_property {
  datatype: String
  disabled: String
  get: String
  hidden: Boolean
  set(numberFormatLocale: String): rich__causeway_applib_UserMemento
  validate(numberFormatLocale: String): String
}

type rich__causeway_applib_UserMemento__realName__gqlv_property {
  datatype: String
  disabled: String
  get: String
  hidden: Boolean
  set(realName: String): rich__causeway_applib_UserMemento
  validate(realName: String): String
}

"roles associated with this user"
type rich__causeway_applib_UserMemento__roles__gqlv_collection {
  datatype: String
  disabled: String
  get: [rich__causeway_applib_RoleMemento]
  hidden: Boolean
}

type rich__causeway_applib_UserMemento__timeFormatLocale__gqlv_property {
  datatype: String
  disabled: String
  get: String
  hidden: Boolean
  set(timeFormatLocale: String): rich__causeway_applib_UserMemento
  validate(timeFormatLocale: String): String
}

type rich__causeway_applib_UserMenu {
  "Returns your user account details"
  me: rich__causeway_applib_UserMenu__me__gqlv_action
}

"Returns your user account details"
type rich__causeway_applib_UserMenu__me__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke: rich__causeway_applib_UserMenu__me__gqlv_action_invoke
  validate: String
}

type rich__causeway_applib_UserMenu__me__gqlv_action_invoke {
  results: rich__causeway_applib_UserMemento
  target: String
}

type rich__causeway_conf_ConfigurationMenu {
  "Configuration"
  configuration: rich__causeway_conf_ConfigurationMenu__configuration__gqlv_action
}

type rich__causeway_conf_ConfigurationMenu__configuration__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke: rich__causeway_conf_ConfigurationMenu__configuration__gqlv_action_invoke
  validate: String
}

type rich__causeway_conf_ConfigurationMenu__configuration__gqlv_action_invoke {
  results: rich__causeway_conf_ConfigurationViewmodel
  target: String
}

type rich__causeway_conf_ConfigurationProperty {
  "Object metadata"
  _meta: rich__causeway_conf_ConfigurationProperty__gqlv_meta
  "Key"
  key: rich__causeway_conf_ConfigurationProperty__key__gqlv_property
  "Value"
  value: rich__causeway_conf_ConfigurationProperty__value__gqlv_property
}

type rich__causeway_conf_ConfigurationProperty__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__causeway_conf_ConfigurationProperty__key__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(key: String!): rich__causeway_conf_ConfigurationProperty
  validate(key: String): String
}

type rich__causeway_conf_ConfigurationProperty__value__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(value: String!): rich__causeway_conf_ConfigurationProperty
  validate(value: String): String
}

type rich__causeway_conf_ConfigurationViewmodel {
  "Object metadata"
  _meta: rich__causeway_conf_ConfigurationViewmodel__gqlv_meta
  "Environment"
  environment: rich__causeway_conf_ConfigurationViewmodel__environment__gqlv_collection
  "Primary"
  primary: rich__causeway_conf_ConfigurationViewmodel__primary__gqlv_collection
  "Secondary"
  secondary: rich__causeway_conf_ConfigurationViewmodel__secondary__gqlv_collection
}

type rich__causeway_conf_ConfigurationViewmodel__environment__gqlv_collection {
  datatype: String
  disabled: String
  get: [rich__causeway_conf_ConfigurationProperty]
  hidden: Boolean
}

type rich__causeway_conf_ConfigurationViewmodel__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__causeway_conf_ConfigurationViewmodel__primary__gqlv_collection {
  datatype: String
  disabled: String
  get: [rich__causeway_conf_ConfigurationProperty]
  hidden: Boolean
}

type rich__causeway_conf_ConfigurationViewmodel__secondary__gqlv_collection {
  datatype: String
  disabled: String
  get: [rich__causeway_conf_ConfigurationProperty]
  hidden: Boolean
}

type rich__causeway_feat_ApplicationFeatureViewModel {
  "Object metadata"
  _meta: rich__causeway_feat_ApplicationFeatureViewModel__gqlv_meta
  "Member Name"
  memberName: rich__causeway_feat_ApplicationFeatureViewModel__memberName__gqlv_property
  "Namespace Name"
  namespaceName: rich__causeway_feat_ApplicationFeatureViewModel__namespaceName__gqlv_property
  "Parent"
  parent: rich__causeway_feat_ApplicationFeatureViewModel__parent__gqlv_property
  "Type Simple Name"
  typeSimpleName: rich__causeway_feat_ApplicationFeatureViewModel__typeSimpleName__gqlv_property
}

type rich__causeway_feat_ApplicationFeatureViewModel__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__causeway_feat_ApplicationFeatureViewModel__memberName__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(memberName: String!): rich__causeway_feat_ApplicationFeatureViewModel
  validate(memberName: String): String
}

type rich__causeway_feat_ApplicationFeatureViewModel__namespaceName__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(namespaceName: String!): rich__causeway_feat_ApplicationFeatureViewModel
  validate(namespaceName: String): String
}

type rich__causeway_feat_ApplicationFeatureViewModel__parent__gqlv_property {
  datatype: String
  disabled: String
  hidden: Boolean
  set(parent: rich__causeway_feat_ApplicationFeatureViewModel__gqlv_input!): rich__causeway_feat_ApplicationFeatureViewModel
  validate(parent: rich__causeway_feat_ApplicationFeatureViewModel__gqlv_input): String
}

type rich__causeway_feat_ApplicationFeatureViewModel__typeSimpleName__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(typeSimpleName: String!): rich__causeway_feat_ApplicationFeatureViewModel
  validate(typeSimpleName: String): String
}

type rich__causeway_feat_ApplicationNamespace {
  "Object metadata"
  _meta: rich__causeway_feat_ApplicationNamespace__gqlv_meta
  "Contents"
  contents: rich__causeway_feat_ApplicationNamespace__contents__gqlv_collection
  "Member Name"
  memberName: rich__causeway_feat_ApplicationNamespace__memberName__gqlv_property
  "Namespace Name"
  namespaceName: rich__causeway_feat_ApplicationNamespace__namespaceName__gqlv_property
  "Parent"
  parent: rich__causeway_feat_ApplicationNamespace__parent__gqlv_property
  "Type Simple Name"
  typeSimpleName: rich__causeway_feat_ApplicationNamespace__typeSimpleName__gqlv_property
}

type rich__causeway_feat_ApplicationNamespace__contents__gqlv_collection {
  datatype: String
  disabled: String
  hidden: Boolean
}

type rich__causeway_feat_ApplicationNamespace__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__causeway_feat_ApplicationNamespace__memberName__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(memberName: String!): rich__causeway_feat_ApplicationNamespace
  validate(memberName: String): String
}

type rich__causeway_feat_ApplicationNamespace__namespaceName__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(namespaceName: String!): rich__causeway_feat_ApplicationNamespace
  validate(namespaceName: String): String
}

type rich__causeway_feat_ApplicationNamespace__parent__gqlv_property {
  datatype: String
  disabled: String
  hidden: Boolean
  set(parent: rich__causeway_feat_ApplicationFeatureViewModel__gqlv_input!): rich__causeway_feat_ApplicationNamespace
  validate(parent: rich__causeway_feat_ApplicationFeatureViewModel__gqlv_input): String
}

type rich__causeway_feat_ApplicationNamespace__typeSimpleName__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(typeSimpleName: String!): rich__causeway_feat_ApplicationNamespace
  validate(typeSimpleName: String): String
}

type rich__causeway_feat_ApplicationType {
  "Object metadata"
  _meta: rich__causeway_feat_ApplicationType__gqlv_meta
  "Actions"
  actions: rich__causeway_feat_ApplicationType__actions__gqlv_collection
  "Collections"
  collections: rich__causeway_feat_ApplicationType__collections__gqlv_collection
  "Member Name"
  memberName: rich__causeway_feat_ApplicationType__memberName__gqlv_property
  "Namespace Name"
  namespaceName: rich__causeway_feat_ApplicationType__namespaceName__gqlv_property
  "Parent"
  parent: rich__causeway_feat_ApplicationType__parent__gqlv_property
  "Properties"
  properties: rich__causeway_feat_ApplicationType__properties__gqlv_collection
  "Type Simple Name"
  typeSimpleName: rich__causeway_feat_ApplicationType__typeSimpleName__gqlv_property
}

type rich__causeway_feat_ApplicationTypeAction {
  "Object metadata"
  _meta: rich__causeway_feat_ApplicationTypeAction__gqlv_meta
  "Action Semantics"
  actionSemantics: rich__causeway_feat_ApplicationTypeAction__actionSemantics__gqlv_property
  "Member Name"
  memberName: rich__causeway_feat_ApplicationTypeAction__memberName__gqlv_property
  "Namespace Name"
  namespaceName: rich__causeway_feat_ApplicationTypeAction__namespaceName__gqlv_property
  "Parent"
  parent: rich__causeway_feat_ApplicationTypeAction__parent__gqlv_property
  "Return Type"
  returnType: rich__causeway_feat_ApplicationTypeAction__returnType__gqlv_property
  "Type Simple Name"
  typeSimpleName: rich__causeway_feat_ApplicationTypeAction__typeSimpleName__gqlv_property
}

type rich__causeway_feat_ApplicationTypeAction__actionSemantics__gqlv_property {
  choices(actionSemantics: rich__causeway_applib_annotation_SemanticsOf__gqlv_enum): [rich__causeway_applib_annotation_SemanticsOf__gqlv_enum]
  datatype: String
  disabled: String
  get: rich__causeway_applib_annotation_SemanticsOf__gqlv_enum!
  hidden: Boolean
  set(actionSemantics: rich__causeway_applib_annotation_SemanticsOf__gqlv_enum!): rich__causeway_feat_ApplicationTypeAction
  validate(actionSemantics: rich__causeway_applib_annotation_SemanticsOf__gqlv_enum): String
}

type rich__causeway_feat_ApplicationTypeAction__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__causeway_feat_ApplicationTypeAction__memberName__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(memberName: String!): rich__causeway_feat_ApplicationTypeAction
  validate(memberName: String): String
}

type rich__causeway_feat_ApplicationTypeAction__namespaceName__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(namespaceName: String!): rich__causeway_feat_ApplicationTypeAction
  validate(namespaceName: String): String
}

type rich__causeway_feat_ApplicationTypeAction__parent__gqlv_property {
  datatype: String
  disabled: String
  hidden: Boolean
  set(parent: rich__causeway_feat_ApplicationFeatureViewModel__gqlv_input!): rich__causeway_feat_ApplicationTypeAction
  validate(parent: rich__causeway_feat_ApplicationFeatureViewModel__gqlv_input): String
}

type rich__causeway_feat_ApplicationTypeAction__returnType__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(returnType: String!): rich__causeway_feat_ApplicationTypeAction
  validate(returnType: String): String
}

type rich__causeway_feat_ApplicationTypeAction__typeSimpleName__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(typeSimpleName: String!): rich__causeway_feat_ApplicationTypeAction
  validate(typeSimpleName: String): String
}

type rich__causeway_feat_ApplicationTypeCollection {
  "Object metadata"
  _meta: rich__causeway_feat_ApplicationTypeCollection__gqlv_meta
  "Derived"
  derived: rich__causeway_feat_ApplicationTypeCollection__derived__gqlv_property
  "Element Type"
  elementType: rich__causeway_feat_ApplicationTypeCollection__elementType__gqlv_property
  "Member Name"
  memberName: rich__causeway_feat_ApplicationTypeCollection__memberName__gqlv_property
  "Namespace Name"
  namespaceName: rich__causeway_feat_ApplicationTypeCollection__namespaceName__gqlv_property
  "Parent"
  parent: rich__causeway_feat_ApplicationTypeCollection__parent__gqlv_property
  "Type Simple Name"
  typeSimpleName: rich__causeway_feat_ApplicationTypeCollection__typeSimpleName__gqlv_property
}

type rich__causeway_feat_ApplicationTypeCollection__derived__gqlv_property {
  datatype: String
  disabled: String
  get: Boolean!
  hidden: Boolean
  set(derived: Boolean!): rich__causeway_feat_ApplicationTypeCollection
  validate(derived: Boolean): String
}

type rich__causeway_feat_ApplicationTypeCollection__elementType__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(elementType: String!): rich__causeway_feat_ApplicationTypeCollection
  validate(elementType: String): String
}

type rich__causeway_feat_ApplicationTypeCollection__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__causeway_feat_ApplicationTypeCollection__memberName__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(memberName: String!): rich__causeway_feat_ApplicationTypeCollection
  validate(memberName: String): String
}

type rich__causeway_feat_ApplicationTypeCollection__namespaceName__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(namespaceName: String!): rich__causeway_feat_ApplicationTypeCollection
  validate(namespaceName: String): String
}

type rich__causeway_feat_ApplicationTypeCollection__parent__gqlv_property {
  datatype: String
  disabled: String
  hidden: Boolean
  set(parent: rich__causeway_feat_ApplicationFeatureViewModel__gqlv_input!): rich__causeway_feat_ApplicationTypeCollection
  validate(parent: rich__causeway_feat_ApplicationFeatureViewModel__gqlv_input): String
}

type rich__causeway_feat_ApplicationTypeCollection__typeSimpleName__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(typeSimpleName: String!): rich__causeway_feat_ApplicationTypeCollection
  validate(typeSimpleName: String): String
}

type rich__causeway_feat_ApplicationTypeMember {
  "Object metadata"
  _meta: rich__causeway_feat_ApplicationTypeMember__gqlv_meta
  "Member Name"
  memberName: rich__causeway_feat_ApplicationTypeMember__memberName__gqlv_property
  "Namespace Name"
  namespaceName: rich__causeway_feat_ApplicationTypeMember__namespaceName__gqlv_property
  "Parent"
  parent: rich__causeway_feat_ApplicationTypeMember__parent__gqlv_property
  "Type Simple Name"
  typeSimpleName: rich__causeway_feat_ApplicationTypeMember__typeSimpleName__gqlv_property
}

type rich__causeway_feat_ApplicationTypeMember__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__causeway_feat_ApplicationTypeMember__memberName__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(memberName: String!): rich__causeway_feat_ApplicationTypeMember
  validate(memberName: String): String
}

type rich__causeway_feat_ApplicationTypeMember__namespaceName__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(namespaceName: String!): rich__causeway_feat_ApplicationTypeMember
  validate(namespaceName: String): String
}

type rich__causeway_feat_ApplicationTypeMember__parent__gqlv_property {
  datatype: String
  disabled: String
  hidden: Boolean
  set(parent: rich__causeway_feat_ApplicationFeatureViewModel__gqlv_input!): rich__causeway_feat_ApplicationTypeMember
  validate(parent: rich__causeway_feat_ApplicationFeatureViewModel__gqlv_input): String
}

type rich__causeway_feat_ApplicationTypeMember__typeSimpleName__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(typeSimpleName: String!): rich__causeway_feat_ApplicationTypeMember
  validate(typeSimpleName: String): String
}

type rich__causeway_feat_ApplicationTypeProperty {
  "Object metadata"
  _meta: rich__causeway_feat_ApplicationTypeProperty__gqlv_meta
  "Derived"
  derived: rich__causeway_feat_ApplicationTypeProperty__derived__gqlv_property
  "Max Length"
  maxLength: rich__causeway_feat_ApplicationTypeProperty__maxLength__gqlv_property
  "Member Name"
  memberName: rich__causeway_feat_ApplicationTypeProperty__memberName__gqlv_property
  "Namespace Name"
  namespaceName: rich__causeway_feat_ApplicationTypeProperty__namespaceName__gqlv_property
  "Parent"
  parent: rich__causeway_feat_ApplicationTypeProperty__parent__gqlv_property
  "Return Type"
  returnType: rich__causeway_feat_ApplicationTypeProperty__returnType__gqlv_property
  "Type Simple Name"
  typeSimpleName: rich__causeway_feat_ApplicationTypeProperty__typeSimpleName__gqlv_property
  "Typical Length"
  typicalLength: rich__causeway_feat_ApplicationTypeProperty__typicalLength__gqlv_property
}

type rich__causeway_feat_ApplicationTypeProperty__derived__gqlv_property {
  datatype: String
  disabled: String
  get: Boolean!
  hidden: Boolean
  set(derived: Boolean!): rich__causeway_feat_ApplicationTypeProperty
  validate(derived: Boolean): String
}

type rich__causeway_feat_ApplicationTypeProperty__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__causeway_feat_ApplicationTypeProperty__maxLength__gqlv_property {
  datatype: String
  disabled: String
  get: Int
  hidden: Boolean
  set(maxLength: Int): rich__causeway_feat_ApplicationTypeProperty
  validate(maxLength: Int): String
}

type rich__causeway_feat_ApplicationTypeProperty__memberName__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(memberName: String!): rich__causeway_feat_ApplicationTypeProperty
  validate(memberName: String): String
}

type rich__causeway_feat_ApplicationTypeProperty__namespaceName__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(namespaceName: String!): rich__causeway_feat_ApplicationTypeProperty
  validate(namespaceName: String): String
}

type rich__causeway_feat_ApplicationTypeProperty__parent__gqlv_property {
  datatype: String
  disabled: String
  hidden: Boolean
  set(parent: rich__causeway_feat_ApplicationFeatureViewModel__gqlv_input!): rich__causeway_feat_ApplicationTypeProperty
  validate(parent: rich__causeway_feat_ApplicationFeatureViewModel__gqlv_input): String
}

type rich__causeway_feat_ApplicationTypeProperty__returnType__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(returnType: String!): rich__causeway_feat_ApplicationTypeProperty
  validate(returnType: String): String
}

type rich__causeway_feat_ApplicationTypeProperty__typeSimpleName__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(typeSimpleName: String!): rich__causeway_feat_ApplicationTypeProperty
  validate(typeSimpleName: String): String
}

type rich__causeway_feat_ApplicationTypeProperty__typicalLength__gqlv_property {
  datatype: String
  disabled: String
  get: Int
  hidden: Boolean
  set(typicalLength: Int): rich__causeway_feat_ApplicationTypeProperty
  validate(typicalLength: Int): String
}

type rich__causeway_feat_ApplicationType__actions__gqlv_collection {
  datatype: String
  disabled: String
  get: [rich__causeway_feat_ApplicationTypeAction]
  hidden: Boolean
}

type rich__causeway_feat_ApplicationType__collections__gqlv_collection {
  datatype: String
  disabled: String
  get: [rich__causeway_feat_ApplicationTypeCollection]
  hidden: Boolean
}

type rich__causeway_feat_ApplicationType__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__causeway_feat_ApplicationType__memberName__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(memberName: String!): rich__causeway_feat_ApplicationType
  validate(memberName: String): String
}

type rich__causeway_feat_ApplicationType__namespaceName__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(namespaceName: String!): rich__causeway_feat_ApplicationType
  validate(namespaceName: String): String
}

type rich__causeway_feat_ApplicationType__parent__gqlv_property {
  datatype: String
  disabled: String
  hidden: Boolean
  set(parent: rich__causeway_feat_ApplicationFeatureViewModel__gqlv_input!): rich__causeway_feat_ApplicationType
  validate(parent: rich__causeway_feat_ApplicationFeatureViewModel__gqlv_input): String
}

type rich__causeway_feat_ApplicationType__properties__gqlv_collection {
  datatype: String
  disabled: String
  get: [rich__causeway_feat_ApplicationTypeProperty]
  hidden: Boolean
}

type rich__causeway_feat_ApplicationType__typeSimpleName__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(typeSimpleName: String!): rich__causeway_feat_ApplicationType
  validate(typeSimpleName: String): String
}

type rich__causeway_security_LoginRedirect {
  "Object metadata"
  _meta: rich__causeway_security_LoginRedirect__gqlv_meta
}

type rich__causeway_security_LoginRedirect__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__causeway_security_LogoutMenu {
  "Logout"
  logout: rich__causeway_security_LogoutMenu__logout__gqlv_action
}

type rich__causeway_security_LogoutMenu__logout__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke: rich__causeway_security_LogoutMenu__logout__gqlv_action_invoke
  validate: String
}

type rich__causeway_security_LogoutMenu__logout__gqlv_action_invoke {
  results: String
  target: String
}

type rich__causeway_testing_fixtures_FixtureResult {
  "Object metadata"
  _meta: rich__causeway_testing_fixtures_FixtureResult__gqlv_meta
  "Result class"
  className: rich__causeway_testing_fixtures_FixtureResult__className__gqlv_property
  "Fixture script"
  fixtureScriptClassName: rich__causeway_testing_fixtures_FixtureResult__fixtureScriptClassName__gqlv_property
  "Key"
  key: rich__causeway_testing_fixtures_FixtureResult__key__gqlv_property
  "Result"
  object: rich__causeway_testing_fixtures_FixtureResult__object__gqlv_property
}

type rich__causeway_testing_fixtures_FixtureResult__className__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(className: String!): rich__causeway_testing_fixtures_FixtureResult
  validate(className: String): String
}

type rich__causeway_testing_fixtures_FixtureResult__fixtureScriptClassName__gqlv_property {
  datatype: String
  disabled: String
  get: String
  hidden: Boolean
  set(fixtureScriptClassName: String): rich__causeway_testing_fixtures_FixtureResult
  validate(fixtureScriptClassName: String): String
}

type rich__causeway_testing_fixtures_FixtureResult__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__causeway_testing_fixtures_FixtureResult__key__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(key: String!): rich__causeway_testing_fixtures_FixtureResult
  validate(key: String): String
}

type rich__causeway_testing_fixtures_FixtureResult__object__gqlv_property {
  datatype: String
  disabled: String
  hidden: Boolean
  set(object: String!): rich__causeway_testing_fixtures_FixtureResult
  validate(object: String): String
}

type rich__java_lang_Record {
  "Object metadata"
  _meta: rich__java_lang_Record__gqlv_meta
}

type rich__java_lang_Record__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__java_lang_Runnable {
  "Object metadata"
  _meta: rich__java_lang_Runnable__gqlv_meta
}

type rich__java_lang_Runnable__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__java_util_concurrent_Callable {
  "Object metadata"
  _meta: rich__java_util_concurrent_Callable__gqlv_meta
}

type rich__java_util_concurrent_Callable__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__java_util_function_Consumer {
  "Object metadata"
  _meta: rich__java_util_function_Consumer__gqlv_meta
}

type rich__java_util_function_Consumer__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__java_util_function_Function {
  "Object metadata"
  _meta: rich__java_util_function_Function__gqlv_meta
}

type rich__java_util_function_Function__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__java_util_stream_Stream {
  "Object metadata"
  _meta: rich__java_util_stream_Stream__gqlv_meta
}

type rich__java_util_stream_Stream__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__org_apache_causeway_applib_graph_tree_MasterDetailTreeView {
  "Object metadata"
  _meta: rich__org_apache_causeway_applib_graph_tree_MasterDetailTreeView__gqlv_meta
  "Tree"
  tree: rich__org_apache_causeway_applib_graph_tree_MasterDetailTreeView__tree__gqlv_property
}

type rich__org_apache_causeway_applib_graph_tree_MasterDetailTreeView__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__org_apache_causeway_applib_graph_tree_MasterDetailTreeView__tree__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(tree: String!): rich__org_apache_causeway_applib_graph_tree_MasterDetailTreeView
  validate(tree: String): String
}

type rich__org_apache_causeway_core_metamodel_inspect_model_MMNode {
  "Object metadata"
  _meta: rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__gqlv_meta
  "Details"
  details: rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__details__gqlv_action
  "Put Details"
  putDetails: rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__putDetails__gqlv_action
  "Stream Child Nodes"
  streamChildNodes: rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__streamChildNodes__gqlv_action
}

type rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__details__gqlv_action {
  disabled: String
  hidden: Boolean
  invokeNonIdempotent: rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__details__gqlv_action_invoke
  validate: String
}

type rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__details__gqlv_action_invoke {
  results: String
  target: rich__org_apache_causeway_core_metamodel_inspect_model_MMNode
}

type rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__putDetails__details__gqlv_action_parameter {
  datatype: String
  disabled(details: String): String
  hidden: Boolean
  validity: String
}

type rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__putDetails__gqlv_action {
  disabled: String
  hidden: Boolean
  invokeNonIdempotent(details: String!): rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__putDetails__gqlv_action_invoke
  "Parameters of this action"
  params: rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__putDetails__gqlv_action_params
  validate(details: String): String
}

type rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__putDetails__gqlv_action_args {
  details: String
}

type rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__putDetails__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__putDetails__gqlv_action_args
  results: String
  target: rich__org_apache_causeway_core_metamodel_inspect_model_MMNode
}

type rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__putDetails__gqlv_action_params {
  "Details"
  details: rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__putDetails__details__gqlv_action_parameter
}

type rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__streamChildNodes__gqlv_action {
  disabled: String
  hidden: Boolean
  invokeNonIdempotent: rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__streamChildNodes__gqlv_action_invoke
  validate: String
}

type rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__streamChildNodes__gqlv_action_invoke {
  results: rich__java_util_stream_Stream
  target: rich__org_apache_causeway_core_metamodel_inspect_model_MMNode
}

type rich__org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript {
  "Object metadata"
  _meta: rich__org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript__gqlv_meta
  "Friendly Name"
  friendlyName: rich__org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript__friendlyName__gqlv_property
  "Qualified Name"
  qualifiedName: rich__org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript__qualifiedName__gqlv_property
}

type rich__org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript__friendlyName__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(friendlyName: String!): rich__org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript
  validate(friendlyName: String): String
}

type rich__org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript__qualifiedName__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(qualifiedName: String!): rich__org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript
  validate(qualifiedName: String): String
}

type rich__university_admin_AdminMenu {
  "Action With Disabled Param"
  actionWithDisabledParam: rich__university_admin_AdminMenu__actionWithDisabledParam__gqlv_action
  "Action With Hidden Param"
  actionWithHiddenParam: rich__university_admin_AdminMenu__actionWithHiddenParam__gqlv_action
  "Admin Action"
  adminAction: rich__university_admin_AdminMenu__adminAction__gqlv_action
  "Other Admin Action"
  otherAdminAction: rich__university_admin_AdminMenu__otherAdminAction__gqlv_action
}

type rich__university_admin_AdminMenu__actionWithDisabledParam__firstParam__gqlv_action_parameter {
  datatype: String
  disabled(firstParam: String): String
  hidden: Boolean
  validity: String
}

type rich__university_admin_AdminMenu__actionWithDisabledParam__gqlv_action {
  disabled: String
  hidden: Boolean
  invokeNonIdempotent(firstParam: String!, secondParam: String!, thirdParameter: String!): rich__university_admin_AdminMenu__actionWithDisabledParam__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_admin_AdminMenu__actionWithDisabledParam__gqlv_action_params
  validate(firstParam: String, secondParam: String, thirdParameter: String): String
}

type rich__university_admin_AdminMenu__actionWithDisabledParam__gqlv_action_args {
  firstParam: String
  secondParam: String
  thirdParameter: String
}

type rich__university_admin_AdminMenu__actionWithDisabledParam__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_admin_AdminMenu__actionWithDisabledParam__gqlv_action_args
  results: String
  target: String
}

type rich__university_admin_AdminMenu__actionWithDisabledParam__gqlv_action_params {
  "First Param"
  firstParam: rich__university_admin_AdminMenu__actionWithDisabledParam__firstParam__gqlv_action_parameter
  "Second Param"
  secondParam: rich__university_admin_AdminMenu__actionWithDisabledParam__secondParam__gqlv_action_parameter
  "Third Parameter"
  thirdParameter: rich__university_admin_AdminMenu__actionWithDisabledParam__thirdParameter__gqlv_action_parameter
}

type rich__university_admin_AdminMenu__actionWithDisabledParam__secondParam__gqlv_action_parameter {
  datatype: String
  disabled(firstParam: String, secondParam: String): String
  hidden(firstParam: String): Boolean
  validity: String
}

type rich__university_admin_AdminMenu__actionWithDisabledParam__thirdParameter__gqlv_action_parameter {
  datatype: String
  disabled(firstParam: String, secondParam: String, thirdParameter: String): String
  hidden(firstParam: String, secondParam: String): Boolean
  validity: String
}

type rich__university_admin_AdminMenu__actionWithHiddenParam__firstParam__gqlv_action_parameter {
  datatype: String
  disabled(firstParam: String): String
  hidden: Boolean
  validity: String
}

type rich__university_admin_AdminMenu__actionWithHiddenParam__gqlv_action {
  disabled: String
  hidden: Boolean
  invokeNonIdempotent(firstParam: String!, secondParam: String!): rich__university_admin_AdminMenu__actionWithHiddenParam__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_admin_AdminMenu__actionWithHiddenParam__gqlv_action_params
  validate(firstParam: String, secondParam: String): String
}

type rich__university_admin_AdminMenu__actionWithHiddenParam__gqlv_action_args {
  firstParam: String
  secondParam: String
}

type rich__university_admin_AdminMenu__actionWithHiddenParam__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_admin_AdminMenu__actionWithHiddenParam__gqlv_action_args
  results: String
  target: String
}

type rich__university_admin_AdminMenu__actionWithHiddenParam__gqlv_action_params {
  "First Param"
  firstParam: rich__university_admin_AdminMenu__actionWithHiddenParam__firstParam__gqlv_action_parameter
  "Second Param"
  secondParam: rich__university_admin_AdminMenu__actionWithHiddenParam__secondParam__gqlv_action_parameter
}

type rich__university_admin_AdminMenu__actionWithHiddenParam__secondParam__gqlv_action_parameter {
  datatype: String
  disabled(firstParam: String, secondParam: String): String
  hidden(firstParam: String): Boolean
  validity: String
}

type rich__university_admin_AdminMenu__adminAction__gqlv_action {
  disabled: String
  hidden: Boolean
  invokeNonIdempotent: rich__university_admin_AdminMenu__adminAction__gqlv_action_invoke
  validate: String
}

type rich__university_admin_AdminMenu__adminAction__gqlv_action_invoke {
  results: String
  target: String
}

type rich__university_admin_AdminMenu__otherAdminAction__gqlv_action {
  disabled: String
  hidden: Boolean
  invokeNonIdempotent: rich__university_admin_AdminMenu__otherAdminAction__gqlv_action_invoke
  validate: String
}

type rich__university_admin_AdminMenu__otherAdminAction__gqlv_action_invoke {
  results: String
  target: String
}

type rich__university_calc_Calculator {
  "Add Big Decimals"
  addBigDecimals: rich__university_calc_Calculator__addBigDecimals__gqlv_action
  "Add Big Integers"
  addBigIntegers: rich__university_calc_Calculator__addBigIntegers__gqlv_action
  "Add Byte Wrappers"
  addByteWrappers: rich__university_calc_Calculator__addByteWrappers__gqlv_action
  "Add Bytes"
  addBytes: rich__university_calc_Calculator__addBytes__gqlv_action
  "Add Double Wrappers"
  addDoubleWrappers: rich__university_calc_Calculator__addDoubleWrappers__gqlv_action
  "Add Doubles"
  addDoubles: rich__university_calc_Calculator__addDoubles__gqlv_action
  "Add Float Wrappers"
  addFloatWrappers: rich__university_calc_Calculator__addFloatWrappers__gqlv_action
  "Add Floats"
  addFloats: rich__university_calc_Calculator__addFloats__gqlv_action
  "Add Integer Wrappers"
  addIntegerWrappers: rich__university_calc_Calculator__addIntegerWrappers__gqlv_action
  "Add Integers"
  addIntegers: rich__university_calc_Calculator__addIntegers__gqlv_action
  "Add Short Wrappers"
  addShortWrappers: rich__university_calc_Calculator__addShortWrappers__gqlv_action
  "Add Shorts"
  addShorts: rich__university_calc_Calculator__addShorts__gqlv_action
  "And"
  and: rich__university_calc_Calculator__and__gqlv_action
  "Concat"
  concat: rich__university_calc_Calculator__concat__gqlv_action
  "Jdk 8 Local Plus Days"
  jdk8LocalPlusDays: rich__university_calc_Calculator__jdk8LocalPlusDays__gqlv_action
  "Jdk 8 Local Plus Hours And Minutes"
  jdk8LocalPlusHoursAndMinutes: rich__university_calc_Calculator__jdk8LocalPlusHoursAndMinutes__gqlv_action
  "Jdk 8 Offset Plus Days And Hours And Minutes"
  jdk8OffsetPlusDaysAndHoursAndMinutes: rich__university_calc_Calculator__jdk8OffsetPlusDaysAndHoursAndMinutes__gqlv_action
  "Jdk 8 Offset Plus Hours And Minutes"
  jdk8OffsetPlusHoursAndMinutes: rich__university_calc_Calculator__jdk8OffsetPlusHoursAndMinutes__gqlv_action
  "Jdk 8 Zoned Plus Days And Hours And Minutes"
  jdk8ZonedPlusDaysAndHoursAndMinutes: rich__university_calc_Calculator__jdk8ZonedPlusDaysAndHoursAndMinutes__gqlv_action
  "Next Month"
  nextMonth: rich__university_calc_Calculator__nextMonth__gqlv_action
  "Not"
  not: rich__university_calc_Calculator__not__gqlv_action
  "Or"
  or: rich__university_calc_Calculator__or__gqlv_action
  "Some Locale"
  someLocale: rich__university_calc_Calculator__someLocale__gqlv_action
  "Some Url"
  someUrl: rich__university_calc_Calculator__someUrl__gqlv_action
  "Some Uuid"
  someUuid: rich__university_calc_Calculator__someUuid__gqlv_action
}

type rich__university_calc_Calculator__addBigDecimals__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: String!, y: String): rich__university_calc_Calculator__addBigDecimals__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_Calculator__addBigDecimals__gqlv_action_params
  validate(x: String, y: String): String
}

type rich__university_calc_Calculator__addBigDecimals__gqlv_action_args {
  x: String
  y: String
}

type rich__university_calc_Calculator__addBigDecimals__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_Calculator__addBigDecimals__gqlv_action_args
  results: String
  target: String
}

type rich__university_calc_Calculator__addBigDecimals__gqlv_action_params {
  "X"
  x: rich__university_calc_Calculator__addBigDecimals__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_Calculator__addBigDecimals__y__gqlv_action_parameter
}

type rich__university_calc_Calculator__addBigDecimals__x__gqlv_action_parameter {
  datatype: String
  disabled(x: String): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_Calculator__addBigDecimals__y__gqlv_action_parameter {
  datatype: String
  disabled(x: String, y: String): String
  hidden(x: String): Boolean
  validity: String
}

type rich__university_calc_Calculator__addBigIntegers__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: String!, y: String): rich__university_calc_Calculator__addBigIntegers__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_Calculator__addBigIntegers__gqlv_action_params
  validate(x: String, y: String): String
}

type rich__university_calc_Calculator__addBigIntegers__gqlv_action_args {
  x: String
  y: String
}

type rich__university_calc_Calculator__addBigIntegers__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_Calculator__addBigIntegers__gqlv_action_args
  results: String
  target: String
}

type rich__university_calc_Calculator__addBigIntegers__gqlv_action_params {
  "X"
  x: rich__university_calc_Calculator__addBigIntegers__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_Calculator__addBigIntegers__y__gqlv_action_parameter
}

type rich__university_calc_Calculator__addBigIntegers__x__gqlv_action_parameter {
  datatype: String
  disabled(x: String): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_Calculator__addBigIntegers__y__gqlv_action_parameter {
  datatype: String
  disabled(x: String, y: String): String
  hidden(x: String): Boolean
  validity: String
}

type rich__university_calc_Calculator__addByteWrappers__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Byte!, y: Byte): rich__university_calc_Calculator__addByteWrappers__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_Calculator__addByteWrappers__gqlv_action_params
  validate(x: Byte, y: Byte): String
}

type rich__university_calc_Calculator__addByteWrappers__gqlv_action_args {
  x: Byte
  y: Byte
}

type rich__university_calc_Calculator__addByteWrappers__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_Calculator__addByteWrappers__gqlv_action_args
  results: Int
  target: String
}

type rich__university_calc_Calculator__addByteWrappers__gqlv_action_params {
  "X"
  x: rich__university_calc_Calculator__addByteWrappers__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_Calculator__addByteWrappers__y__gqlv_action_parameter
}

type rich__university_calc_Calculator__addByteWrappers__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Byte): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_Calculator__addByteWrappers__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Byte, y: Byte): String
  hidden(x: Byte): Boolean
  validity: String
}

type rich__university_calc_Calculator__addBytes__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Byte!, y: Byte!): rich__university_calc_Calculator__addBytes__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_Calculator__addBytes__gqlv_action_params
  validate(x: Byte, y: Byte): String
}

type rich__university_calc_Calculator__addBytes__gqlv_action_args {
  x: Byte
  y: Byte
}

type rich__university_calc_Calculator__addBytes__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_Calculator__addBytes__gqlv_action_args
  results: Byte
  target: String
}

type rich__university_calc_Calculator__addBytes__gqlv_action_params {
  "X"
  x: rich__university_calc_Calculator__addBytes__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_Calculator__addBytes__y__gqlv_action_parameter
}

type rich__university_calc_Calculator__addBytes__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Byte): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_Calculator__addBytes__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Byte, y: Byte): String
  hidden(x: Byte): Boolean
  validity: String
}

type rich__university_calc_Calculator__addDoubleWrappers__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Float!, y: Float): rich__university_calc_Calculator__addDoubleWrappers__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_Calculator__addDoubleWrappers__gqlv_action_params
  validate(x: Float, y: Float): String
}

type rich__university_calc_Calculator__addDoubleWrappers__gqlv_action_args {
  x: Float
  y: Float
}

type rich__university_calc_Calculator__addDoubleWrappers__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_Calculator__addDoubleWrappers__gqlv_action_args
  results: Float
  target: String
}

type rich__university_calc_Calculator__addDoubleWrappers__gqlv_action_params {
  "X"
  x: rich__university_calc_Calculator__addDoubleWrappers__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_Calculator__addDoubleWrappers__y__gqlv_action_parameter
}

type rich__university_calc_Calculator__addDoubleWrappers__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Float): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_Calculator__addDoubleWrappers__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Float, y: Float): String
  hidden(x: Float): Boolean
  validity: String
}

type rich__university_calc_Calculator__addDoubles__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Float!, y: Float!): rich__university_calc_Calculator__addDoubles__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_Calculator__addDoubles__gqlv_action_params
  validate(x: Float, y: Float): String
}

type rich__university_calc_Calculator__addDoubles__gqlv_action_args {
  x: Float
  y: Float
}

type rich__university_calc_Calculator__addDoubles__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_Calculator__addDoubles__gqlv_action_args
  results: Float
  target: String
}

type rich__university_calc_Calculator__addDoubles__gqlv_action_params {
  "X"
  x: rich__university_calc_Calculator__addDoubles__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_Calculator__addDoubles__y__gqlv_action_parameter
}

type rich__university_calc_Calculator__addDoubles__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Float): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_Calculator__addDoubles__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Float, y: Float): String
  hidden(x: Float): Boolean
  validity: String
}

type rich__university_calc_Calculator__addFloatWrappers__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Float!, y: Float): rich__university_calc_Calculator__addFloatWrappers__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_Calculator__addFloatWrappers__gqlv_action_params
  validate(x: Float, y: Float): String
}

type rich__university_calc_Calculator__addFloatWrappers__gqlv_action_args {
  x: Float
  y: Float
}

type rich__university_calc_Calculator__addFloatWrappers__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_Calculator__addFloatWrappers__gqlv_action_args
  results: Float
  target: String
}

type rich__university_calc_Calculator__addFloatWrappers__gqlv_action_params {
  "X"
  x: rich__university_calc_Calculator__addFloatWrappers__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_Calculator__addFloatWrappers__y__gqlv_action_parameter
}

type rich__university_calc_Calculator__addFloatWrappers__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Float): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_Calculator__addFloatWrappers__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Float, y: Float): String
  hidden(x: Float): Boolean
  validity: String
}

type rich__university_calc_Calculator__addFloats__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Float!, y: Float!): rich__university_calc_Calculator__addFloats__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_Calculator__addFloats__gqlv_action_params
  validate(x: Float, y: Float): String
}

type rich__university_calc_Calculator__addFloats__gqlv_action_args {
  x: Float
  y: Float
}

type rich__university_calc_Calculator__addFloats__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_Calculator__addFloats__gqlv_action_args
  results: Float
  target: String
}

type rich__university_calc_Calculator__addFloats__gqlv_action_params {
  "X"
  x: rich__university_calc_Calculator__addFloats__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_Calculator__addFloats__y__gqlv_action_parameter
}

type rich__university_calc_Calculator__addFloats__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Float): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_Calculator__addFloats__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Float, y: Float): String
  hidden(x: Float): Boolean
  validity: String
}

type rich__university_calc_Calculator__addIntegerWrappers__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Int!, y: Int): rich__university_calc_Calculator__addIntegerWrappers__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_Calculator__addIntegerWrappers__gqlv_action_params
  validate(x: Int, y: Int): String
}

type rich__university_calc_Calculator__addIntegerWrappers__gqlv_action_args {
  x: Int
  y: Int
}

type rich__university_calc_Calculator__addIntegerWrappers__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_Calculator__addIntegerWrappers__gqlv_action_args
  results: Int
  target: String
}

type rich__university_calc_Calculator__addIntegerWrappers__gqlv_action_params {
  "X"
  x: rich__university_calc_Calculator__addIntegerWrappers__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_Calculator__addIntegerWrappers__y__gqlv_action_parameter
}

type rich__university_calc_Calculator__addIntegerWrappers__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Int): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_Calculator__addIntegerWrappers__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Int, y: Int): String
  hidden(x: Int): Boolean
  validity: String
}

type rich__university_calc_Calculator__addIntegers__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Int!, y: Int!): rich__university_calc_Calculator__addIntegers__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_Calculator__addIntegers__gqlv_action_params
  validate(x: Int, y: Int): String
}

type rich__university_calc_Calculator__addIntegers__gqlv_action_args {
  x: Int
  y: Int
}

type rich__university_calc_Calculator__addIntegers__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_Calculator__addIntegers__gqlv_action_args
  results: Int
  target: String
}

type rich__university_calc_Calculator__addIntegers__gqlv_action_params {
  "X"
  x: rich__university_calc_Calculator__addIntegers__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_Calculator__addIntegers__y__gqlv_action_parameter
}

type rich__university_calc_Calculator__addIntegers__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Int): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_Calculator__addIntegers__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Int, y: Int): String
  hidden(x: Int): Boolean
  validity: String
}

type rich__university_calc_Calculator__addShortWrappers__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Short!, y: Short): rich__university_calc_Calculator__addShortWrappers__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_Calculator__addShortWrappers__gqlv_action_params
  validate(x: Short, y: Short): String
}

type rich__university_calc_Calculator__addShortWrappers__gqlv_action_args {
  x: Short
  y: Short
}

type rich__university_calc_Calculator__addShortWrappers__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_Calculator__addShortWrappers__gqlv_action_args
  results: Short
  target: String
}

type rich__university_calc_Calculator__addShortWrappers__gqlv_action_params {
  "X"
  x: rich__university_calc_Calculator__addShortWrappers__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_Calculator__addShortWrappers__y__gqlv_action_parameter
}

type rich__university_calc_Calculator__addShortWrappers__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Short): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_Calculator__addShortWrappers__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Short, y: Short): String
  hidden(x: Short): Boolean
  validity: String
}

type rich__university_calc_Calculator__addShorts__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Short!, y: Short!): rich__university_calc_Calculator__addShorts__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_Calculator__addShorts__gqlv_action_params
  validate(x: Short, y: Short): String
}

type rich__university_calc_Calculator__addShorts__gqlv_action_args {
  x: Short
  y: Short
}

type rich__university_calc_Calculator__addShorts__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_Calculator__addShorts__gqlv_action_args
  results: Short
  target: String
}

type rich__university_calc_Calculator__addShorts__gqlv_action_params {
  "X"
  x: rich__university_calc_Calculator__addShorts__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_Calculator__addShorts__y__gqlv_action_parameter
}

type rich__university_calc_Calculator__addShorts__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Short): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_Calculator__addShorts__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Short, y: Short): String
  hidden(x: Short): Boolean
  validity: String
}

type rich__university_calc_Calculator__and__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Boolean!, y: Boolean!): rich__university_calc_Calculator__and__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_Calculator__and__gqlv_action_params
  validate(x: Boolean, y: Boolean): String
}

type rich__university_calc_Calculator__and__gqlv_action_args {
  x: Boolean
  y: Boolean
}

type rich__university_calc_Calculator__and__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_Calculator__and__gqlv_action_args
  results: Boolean
  target: String
}

type rich__university_calc_Calculator__and__gqlv_action_params {
  "X"
  x: rich__university_calc_Calculator__and__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_Calculator__and__y__gqlv_action_parameter
}

type rich__university_calc_Calculator__and__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Boolean): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_Calculator__and__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Boolean, y: Boolean): String
  hidden(x: Boolean): Boolean
  validity: String
}

type rich__university_calc_Calculator__concat__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(prefix: String!, suffix: String): rich__university_calc_Calculator__concat__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_Calculator__concat__gqlv_action_params
  validate(prefix: String, suffix: String): String
}

type rich__university_calc_Calculator__concat__gqlv_action_args {
  prefix: String
  suffix: String
}

type rich__university_calc_Calculator__concat__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_Calculator__concat__gqlv_action_args
  results: String
  target: String
}

type rich__university_calc_Calculator__concat__gqlv_action_params {
  "Prefix"
  prefix: rich__university_calc_Calculator__concat__prefix__gqlv_action_parameter
  "Suffix"
  suffix: rich__university_calc_Calculator__concat__suffix__gqlv_action_parameter
}

type rich__university_calc_Calculator__concat__prefix__gqlv_action_parameter {
  datatype: String
  disabled(prefix: String): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_Calculator__concat__suffix__gqlv_action_parameter {
  datatype: String
  disabled(prefix: String, suffix: String): String
  hidden(prefix: String): Boolean
  validity: String
}

type rich__university_calc_Calculator__jdk8LocalPlusDays__date__gqlv_action_parameter {
  datatype: String
  disabled(date: String): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_Calculator__jdk8LocalPlusDays__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(date: String!, numDays: Int!): rich__university_calc_Calculator__jdk8LocalPlusDays__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_Calculator__jdk8LocalPlusDays__gqlv_action_params
  validate(date: String, numDays: Int): String
}

type rich__university_calc_Calculator__jdk8LocalPlusDays__gqlv_action_args {
  date: String
  numDays: Int
}

type rich__university_calc_Calculator__jdk8LocalPlusDays__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_Calculator__jdk8LocalPlusDays__gqlv_action_args
  results: String
  target: String
}

type rich__university_calc_Calculator__jdk8LocalPlusDays__gqlv_action_params {
  "Date"
  date: rich__university_calc_Calculator__jdk8LocalPlusDays__date__gqlv_action_parameter
  "Num Days"
  numDays: rich__university_calc_Calculator__jdk8LocalPlusDays__numDays__gqlv_action_parameter
}

type rich__university_calc_Calculator__jdk8LocalPlusDays__numDays__gqlv_action_parameter {
  datatype: String
  disabled(date: String, numDays: Int): String
  hidden(date: String): Boolean
  validity: String
}

type rich__university_calc_Calculator__jdk8LocalPlusHoursAndMinutes__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(numHours: Int!, numMinutes: Int!, time: String!): rich__university_calc_Calculator__jdk8LocalPlusHoursAndMinutes__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_Calculator__jdk8LocalPlusHoursAndMinutes__gqlv_action_params
  validate(numHours: Int, numMinutes: Int, time: String): String
}

type rich__university_calc_Calculator__jdk8LocalPlusHoursAndMinutes__gqlv_action_args {
  numHours: Int
  numMinutes: Int
  time: String
}

type rich__university_calc_Calculator__jdk8LocalPlusHoursAndMinutes__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_Calculator__jdk8LocalPlusHoursAndMinutes__gqlv_action_args
  results: String
  target: String
}

type rich__university_calc_Calculator__jdk8LocalPlusHoursAndMinutes__gqlv_action_params {
  "Num Hours"
  numHours: rich__university_calc_Calculator__jdk8LocalPlusHoursAndMinutes__numHours__gqlv_action_parameter
  "Num Minutes"
  numMinutes: rich__university_calc_Calculator__jdk8LocalPlusHoursAndMinutes__numMinutes__gqlv_action_parameter
  "Time"
  time: rich__university_calc_Calculator__jdk8LocalPlusHoursAndMinutes__time__gqlv_action_parameter
}

type rich__university_calc_Calculator__jdk8LocalPlusHoursAndMinutes__numHours__gqlv_action_parameter {
  datatype: String
  disabled(numHours: Int, time: String): String
  hidden(time: String): Boolean
  validity: String
}

type rich__university_calc_Calculator__jdk8LocalPlusHoursAndMinutes__numMinutes__gqlv_action_parameter {
  datatype: String
  disabled(numHours: Int, numMinutes: Int, time: String): String
  hidden(numHours: Int, time: String): Boolean
  validity: String
}

type rich__university_calc_Calculator__jdk8LocalPlusHoursAndMinutes__time__gqlv_action_parameter {
  datatype: String
  disabled(time: String): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_Calculator__jdk8OffsetPlusDaysAndHoursAndMinutes__dateTime__gqlv_action_parameter {
  datatype: String
  disabled(dateTime: DateTime): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_Calculator__jdk8OffsetPlusDaysAndHoursAndMinutes__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(dateTime: DateTime!, numDays: Int!, numHours: Int!, numMinutes: Int!): rich__university_calc_Calculator__jdk8OffsetPlusDaysAndHoursAndMinutes__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_Calculator__jdk8OffsetPlusDaysAndHoursAndMinutes__gqlv_action_params
  validate(dateTime: DateTime, numDays: Int, numHours: Int, numMinutes: Int): String
}

type rich__university_calc_Calculator__jdk8OffsetPlusDaysAndHoursAndMinutes__gqlv_action_args {
  dateTime: DateTime
  numDays: Int
  numHours: Int
  numMinutes: Int
}

type rich__university_calc_Calculator__jdk8OffsetPlusDaysAndHoursAndMinutes__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_Calculator__jdk8OffsetPlusDaysAndHoursAndMinutes__gqlv_action_args
  results: DateTime
  target: String
}

type rich__university_calc_Calculator__jdk8OffsetPlusDaysAndHoursAndMinutes__gqlv_action_params {
  "Date Time"
  dateTime: rich__university_calc_Calculator__jdk8OffsetPlusDaysAndHoursAndMinutes__dateTime__gqlv_action_parameter
  "Num Days"
  numDays: rich__university_calc_Calculator__jdk8OffsetPlusDaysAndHoursAndMinutes__numDays__gqlv_action_parameter
  "Num Hours"
  numHours: rich__university_calc_Calculator__jdk8OffsetPlusDaysAndHoursAndMinutes__numHours__gqlv_action_parameter
  "Num Minutes"
  numMinutes: rich__university_calc_Calculator__jdk8OffsetPlusDaysAndHoursAndMinutes__numMinutes__gqlv_action_parameter
}

type rich__university_calc_Calculator__jdk8OffsetPlusDaysAndHoursAndMinutes__numDays__gqlv_action_parameter {
  datatype: String
  disabled(dateTime: DateTime, numDays: Int): String
  hidden(dateTime: DateTime): Boolean
  validity: String
}

type rich__university_calc_Calculator__jdk8OffsetPlusDaysAndHoursAndMinutes__numHours__gqlv_action_parameter {
  datatype: String
  disabled(dateTime: DateTime, numDays: Int, numHours: Int): String
  hidden(dateTime: DateTime, numDays: Int): Boolean
  validity: String
}

type rich__university_calc_Calculator__jdk8OffsetPlusDaysAndHoursAndMinutes__numMinutes__gqlv_action_parameter {
  datatype: String
  disabled(dateTime: DateTime, numDays: Int, numHours: Int, numMinutes: Int): String
  hidden(dateTime: DateTime, numDays: Int, numHours: Int): Boolean
  validity: String
}

type rich__university_calc_Calculator__jdk8OffsetPlusHoursAndMinutes__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(numHours: Int!, numMinutes: Int!, time: Time!): rich__university_calc_Calculator__jdk8OffsetPlusHoursAndMinutes__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_Calculator__jdk8OffsetPlusHoursAndMinutes__gqlv_action_params
  validate(numHours: Int, numMinutes: Int, time: Time): String
}

type rich__university_calc_Calculator__jdk8OffsetPlusHoursAndMinutes__gqlv_action_args {
  numHours: Int
  numMinutes: Int
  time: Time
}

type rich__university_calc_Calculator__jdk8OffsetPlusHoursAndMinutes__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_Calculator__jdk8OffsetPlusHoursAndMinutes__gqlv_action_args
  results: Time
  target: String
}

type rich__university_calc_Calculator__jdk8OffsetPlusHoursAndMinutes__gqlv_action_params {
  "Num Hours"
  numHours: rich__university_calc_Calculator__jdk8OffsetPlusHoursAndMinutes__numHours__gqlv_action_parameter
  "Num Minutes"
  numMinutes: rich__university_calc_Calculator__jdk8OffsetPlusHoursAndMinutes__numMinutes__gqlv_action_parameter
  "Time"
  time: rich__university_calc_Calculator__jdk8OffsetPlusHoursAndMinutes__time__gqlv_action_parameter
}

type rich__university_calc_Calculator__jdk8OffsetPlusHoursAndMinutes__numHours__gqlv_action_parameter {
  datatype: String
  disabled(numHours: Int, time: Time): String
  hidden(time: Time): Boolean
  validity: String
}

type rich__university_calc_Calculator__jdk8OffsetPlusHoursAndMinutes__numMinutes__gqlv_action_parameter {
  datatype: String
  disabled(numHours: Int, numMinutes: Int, time: Time): String
  hidden(numHours: Int, time: Time): Boolean
  validity: String
}

type rich__university_calc_Calculator__jdk8OffsetPlusHoursAndMinutes__time__gqlv_action_parameter {
  datatype: String
  disabled(time: Time): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_Calculator__jdk8ZonedPlusDaysAndHoursAndMinutes__dateTime__gqlv_action_parameter {
  datatype: String
  disabled(dateTime: String): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_Calculator__jdk8ZonedPlusDaysAndHoursAndMinutes__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(dateTime: String!, numDays: Int!, numHours: Int!, numMinutes: Int!): rich__university_calc_Calculator__jdk8ZonedPlusDaysAndHoursAndMinutes__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_Calculator__jdk8ZonedPlusDaysAndHoursAndMinutes__gqlv_action_params
  validate(dateTime: String, numDays: Int, numHours: Int, numMinutes: Int): String
}

type rich__university_calc_Calculator__jdk8ZonedPlusDaysAndHoursAndMinutes__gqlv_action_args {
  dateTime: String
  numDays: Int
  numHours: Int
  numMinutes: Int
}

type rich__university_calc_Calculator__jdk8ZonedPlusDaysAndHoursAndMinutes__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_Calculator__jdk8ZonedPlusDaysAndHoursAndMinutes__gqlv_action_args
  results: String
  target: String
}

type rich__university_calc_Calculator__jdk8ZonedPlusDaysAndHoursAndMinutes__gqlv_action_params {
  "Date Time"
  dateTime: rich__university_calc_Calculator__jdk8ZonedPlusDaysAndHoursAndMinutes__dateTime__gqlv_action_parameter
  "Num Days"
  numDays: rich__university_calc_Calculator__jdk8ZonedPlusDaysAndHoursAndMinutes__numDays__gqlv_action_parameter
  "Num Hours"
  numHours: rich__university_calc_Calculator__jdk8ZonedPlusDaysAndHoursAndMinutes__numHours__gqlv_action_parameter
  "Num Minutes"
  numMinutes: rich__university_calc_Calculator__jdk8ZonedPlusDaysAndHoursAndMinutes__numMinutes__gqlv_action_parameter
}

type rich__university_calc_Calculator__jdk8ZonedPlusDaysAndHoursAndMinutes__numDays__gqlv_action_parameter {
  datatype: String
  disabled(dateTime: String, numDays: Int): String
  hidden(dateTime: String): Boolean
  validity: String
}

type rich__university_calc_Calculator__jdk8ZonedPlusDaysAndHoursAndMinutes__numHours__gqlv_action_parameter {
  datatype: String
  disabled(dateTime: String, numDays: Int, numHours: Int): String
  hidden(dateTime: String, numDays: Int): Boolean
  validity: String
}

type rich__university_calc_Calculator__jdk8ZonedPlusDaysAndHoursAndMinutes__numMinutes__gqlv_action_parameter {
  datatype: String
  disabled(dateTime: String, numDays: Int, numHours: Int, numMinutes: Int): String
  hidden(dateTime: String, numDays: Int, numHours: Int): Boolean
  validity: String
}

type rich__university_calc_Calculator__nextMonth__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(month: rich__org_apache_causeway_viewer_graphql_viewer_test_domain_calc_Month__gqlv_enum!): rich__university_calc_Calculator__nextMonth__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_Calculator__nextMonth__gqlv_action_params
  validate(month: rich__org_apache_causeway_viewer_graphql_viewer_test_domain_calc_Month__gqlv_enum): String
}

type rich__university_calc_Calculator__nextMonth__gqlv_action_args {
  month: rich__org_apache_causeway_viewer_graphql_viewer_test_domain_calc_Month__gqlv_enum
}

type rich__university_calc_Calculator__nextMonth__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_Calculator__nextMonth__gqlv_action_args
  results: rich__org_apache_causeway_viewer_graphql_viewer_test_domain_calc_Month__gqlv_enum
  target: String
}

type rich__university_calc_Calculator__nextMonth__gqlv_action_params {
  "Month"
  month: rich__university_calc_Calculator__nextMonth__month__gqlv_action_parameter
}

type rich__university_calc_Calculator__nextMonth__month__gqlv_action_parameter {
  choices: [rich__org_apache_causeway_viewer_graphql_viewer_test_domain_calc_Month__gqlv_enum]
  datatype: String
  disabled(month: rich__org_apache_causeway_viewer_graphql_viewer_test_domain_calc_Month__gqlv_enum): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_Calculator__not__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Boolean!): rich__university_calc_Calculator__not__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_Calculator__not__gqlv_action_params
  validate(x: Boolean): String
}

type rich__university_calc_Calculator__not__gqlv_action_args {
  x: Boolean
}

type rich__university_calc_Calculator__not__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_Calculator__not__gqlv_action_args
  results: Boolean
  target: String
}

type rich__university_calc_Calculator__not__gqlv_action_params {
  "X"
  x: rich__university_calc_Calculator__not__x__gqlv_action_parameter
}

type rich__university_calc_Calculator__not__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Boolean): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_Calculator__or__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Boolean!, y: Boolean!): rich__university_calc_Calculator__or__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_Calculator__or__gqlv_action_params
  validate(x: Boolean, y: Boolean): String
}

type rich__university_calc_Calculator__or__gqlv_action_args {
  x: Boolean
  y: Boolean
}

type rich__university_calc_Calculator__or__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_Calculator__or__gqlv_action_args
  results: Boolean
  target: String
}

type rich__university_calc_Calculator__or__gqlv_action_params {
  "X"
  x: rich__university_calc_Calculator__or__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_Calculator__or__y__gqlv_action_parameter
}

type rich__university_calc_Calculator__or__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Boolean): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_Calculator__or__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Boolean, y: Boolean): String
  hidden(x: Boolean): Boolean
  validity: String
}

type rich__university_calc_Calculator__someLocale__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke: rich__university_calc_Calculator__someLocale__gqlv_action_invoke
  validate: String
}

type rich__university_calc_Calculator__someLocale__gqlv_action_invoke {
  results: String
  target: String
}

type rich__university_calc_Calculator__someUrl__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke: rich__university_calc_Calculator__someUrl__gqlv_action_invoke
  validate: String
}

type rich__university_calc_Calculator__someUrl__gqlv_action_invoke {
  results: String
  target: String
}

type rich__university_calc_Calculator__someUuid__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke: rich__university_calc_Calculator__someUuid__gqlv_action_invoke
  validate: String
}

type rich__university_calc_Calculator__someUuid__gqlv_action_invoke {
  results: UUID
  target: String
}

type rich__university_calc_I18nCalculator {
  "Concät"
  concat: rich__university_calc_I18nCalculator__concat__gqlv_action
}

type rich__university_calc_I18nCalculator__concat__a1__gqlv_action_parameter {
  datatype: String
  disabled(a1: String): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_I18nCalculator__concat__a2__gqlv_action_parameter {
  datatype: String
  disabled(a1: String, a2: String): String
  hidden(a1: String): Boolean
  validity: String
}

type rich__university_calc_I18nCalculator__concat__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(a1: String!, a2: String!): rich__university_calc_I18nCalculator__concat__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_I18nCalculator__concat__gqlv_action_params
  validate(a1: String, a2: String): String
}

type rich__university_calc_I18nCalculator__concat__gqlv_action_args {
  a1: String
  a2: String
}

type rich__university_calc_I18nCalculator__concat__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_I18nCalculator__concat__gqlv_action_args
  results: String
  target: String
}

type rich__university_calc_I18nCalculator__concat__gqlv_action_params {
  "Ä1"
  a1: rich__university_calc_I18nCalculator__concat__a1__gqlv_action_parameter
  "Ä2"
  a2: rich__university_calc_I18nCalculator__concat__a2__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated {
  "Add Big Decimals"
  addBigDecimals: rich__university_calc_calculatorHyphenated__addBigDecimals__gqlv_action
  "Add Big Integers"
  addBigIntegers: rich__university_calc_calculatorHyphenated__addBigIntegers__gqlv_action
  "Add Byte Wrappers"
  addByteWrappers: rich__university_calc_calculatorHyphenated__addByteWrappers__gqlv_action
  "Add Bytes"
  addBytes: rich__university_calc_calculatorHyphenated__addBytes__gqlv_action
  "Add Double Wrappers"
  addDoubleWrappers: rich__university_calc_calculatorHyphenated__addDoubleWrappers__gqlv_action
  "Add Doubles"
  addDoubles: rich__university_calc_calculatorHyphenated__addDoubles__gqlv_action
  "Add Float Wrappers"
  addFloatWrappers: rich__university_calc_calculatorHyphenated__addFloatWrappers__gqlv_action
  "Add Floats"
  addFloats: rich__university_calc_calculatorHyphenated__addFloats__gqlv_action
  "Add Integer Wrappers"
  addIntegerWrappers: rich__university_calc_calculatorHyphenated__addIntegerWrappers__gqlv_action
  "Add Integers"
  addIntegers: rich__university_calc_calculatorHyphenated__addIntegers__gqlv_action
  "Add Short Wrappers"
  addShortWrappers: rich__university_calc_calculatorHyphenated__addShortWrappers__gqlv_action
  "Add Shorts"
  addShorts: rich__university_calc_calculatorHyphenated__addShorts__gqlv_action
  "And"
  and: rich__university_calc_calculatorHyphenated__and__gqlv_action
  "Concat"
  concat: rich__university_calc_calculatorHyphenated__concat__gqlv_action
  "Local Date Plus Days"
  localDatePlusDays: rich__university_calc_calculatorHyphenated__localDatePlusDays__gqlv_action
  "Local Date Time Plus Days And Hours And Minutes"
  localDateTimePlusDaysAndHoursAndMinutes: rich__university_calc_calculatorHyphenated__localDateTimePlusDaysAndHoursAndMinutes__gqlv_action
  "Local Time Plus Hours And Minutes"
  localTimePlusHoursAndMinutes: rich__university_calc_calculatorHyphenated__localTimePlusHoursAndMinutes__gqlv_action
  "Next Month"
  nextMonth: rich__university_calc_calculatorHyphenated__nextMonth__gqlv_action
  "Not"
  not: rich__university_calc_calculatorHyphenated__not__gqlv_action
  "Offset Date Time Plus Days And Hours And Minutes"
  offsetDateTimePlusDaysAndHoursAndMinutes: rich__university_calc_calculatorHyphenated__offsetDateTimePlusDaysAndHoursAndMinutes__gqlv_action
  "Offset Time Plus Hours And Minutes"
  offsetTimePlusHoursAndMinutes: rich__university_calc_calculatorHyphenated__offsetTimePlusHoursAndMinutes__gqlv_action
  "Or"
  or: rich__university_calc_calculatorHyphenated__or__gqlv_action
  "Some Locale"
  someLocale: rich__university_calc_calculatorHyphenated__someLocale__gqlv_action
  "Some Url"
  someUrl: rich__university_calc_calculatorHyphenated__someUrl__gqlv_action
  "Some Uuid"
  someUuid: rich__university_calc_calculatorHyphenated__someUuid__gqlv_action
  "Zoned Date Time Plus Days And Hours And Minutes"
  zonedDateTimePlusDaysAndHoursAndMinutes: rich__university_calc_calculatorHyphenated__zonedDateTimePlusDaysAndHoursAndMinutes__gqlv_action
}

type rich__university_calc_calculatorHyphenated__addBigDecimals__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: String!, y: String): rich__university_calc_calculatorHyphenated__addBigDecimals__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_calculatorHyphenated__addBigDecimals__gqlv_action_params
  validate(x: String, y: String): String
}

type rich__university_calc_calculatorHyphenated__addBigDecimals__gqlv_action_args {
  x: String
  y: String
}

type rich__university_calc_calculatorHyphenated__addBigDecimals__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_calculatorHyphenated__addBigDecimals__gqlv_action_args
  results: String
  target: String
}

type rich__university_calc_calculatorHyphenated__addBigDecimals__gqlv_action_params {
  "X"
  x: rich__university_calc_calculatorHyphenated__addBigDecimals__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_calculatorHyphenated__addBigDecimals__y__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated__addBigDecimals__x__gqlv_action_parameter {
  datatype: String
  disabled(x: String): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__addBigDecimals__y__gqlv_action_parameter {
  datatype: String
  disabled(x: String, y: String): String
  hidden(x: String): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__addBigIntegers__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: String!, y: String): rich__university_calc_calculatorHyphenated__addBigIntegers__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_calculatorHyphenated__addBigIntegers__gqlv_action_params
  validate(x: String, y: String): String
}

type rich__university_calc_calculatorHyphenated__addBigIntegers__gqlv_action_args {
  x: String
  y: String
}

type rich__university_calc_calculatorHyphenated__addBigIntegers__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_calculatorHyphenated__addBigIntegers__gqlv_action_args
  results: String
  target: String
}

type rich__university_calc_calculatorHyphenated__addBigIntegers__gqlv_action_params {
  "X"
  x: rich__university_calc_calculatorHyphenated__addBigIntegers__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_calculatorHyphenated__addBigIntegers__y__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated__addBigIntegers__x__gqlv_action_parameter {
  datatype: String
  disabled(x: String): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__addBigIntegers__y__gqlv_action_parameter {
  datatype: String
  disabled(x: String, y: String): String
  hidden(x: String): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__addByteWrappers__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Byte!, y: Byte): rich__university_calc_calculatorHyphenated__addByteWrappers__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_calculatorHyphenated__addByteWrappers__gqlv_action_params
  validate(x: Byte, y: Byte): String
}

type rich__university_calc_calculatorHyphenated__addByteWrappers__gqlv_action_args {
  x: Byte
  y: Byte
}

type rich__university_calc_calculatorHyphenated__addByteWrappers__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_calculatorHyphenated__addByteWrappers__gqlv_action_args
  results: Int
  target: String
}

type rich__university_calc_calculatorHyphenated__addByteWrappers__gqlv_action_params {
  "X"
  x: rich__university_calc_calculatorHyphenated__addByteWrappers__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_calculatorHyphenated__addByteWrappers__y__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated__addByteWrappers__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Byte): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__addByteWrappers__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Byte, y: Byte): String
  hidden(x: Byte): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__addBytes__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Byte!, y: Byte!): rich__university_calc_calculatorHyphenated__addBytes__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_calculatorHyphenated__addBytes__gqlv_action_params
  validate(x: Byte, y: Byte): String
}

type rich__university_calc_calculatorHyphenated__addBytes__gqlv_action_args {
  x: Byte
  y: Byte
}

type rich__university_calc_calculatorHyphenated__addBytes__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_calculatorHyphenated__addBytes__gqlv_action_args
  results: Byte
  target: String
}

type rich__university_calc_calculatorHyphenated__addBytes__gqlv_action_params {
  "X"
  x: rich__university_calc_calculatorHyphenated__addBytes__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_calculatorHyphenated__addBytes__y__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated__addBytes__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Byte): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__addBytes__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Byte, y: Byte): String
  hidden(x: Byte): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__addDoubleWrappers__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Float!, y: Float): rich__university_calc_calculatorHyphenated__addDoubleWrappers__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_calculatorHyphenated__addDoubleWrappers__gqlv_action_params
  validate(x: Float, y: Float): String
}

type rich__university_calc_calculatorHyphenated__addDoubleWrappers__gqlv_action_args {
  x: Float
  y: Float
}

type rich__university_calc_calculatorHyphenated__addDoubleWrappers__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_calculatorHyphenated__addDoubleWrappers__gqlv_action_args
  results: Float
  target: String
}

type rich__university_calc_calculatorHyphenated__addDoubleWrappers__gqlv_action_params {
  "X"
  x: rich__university_calc_calculatorHyphenated__addDoubleWrappers__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_calculatorHyphenated__addDoubleWrappers__y__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated__addDoubleWrappers__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Float): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__addDoubleWrappers__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Float, y: Float): String
  hidden(x: Float): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__addDoubles__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Float!, y: Float!): rich__university_calc_calculatorHyphenated__addDoubles__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_calculatorHyphenated__addDoubles__gqlv_action_params
  validate(x: Float, y: Float): String
}

type rich__university_calc_calculatorHyphenated__addDoubles__gqlv_action_args {
  x: Float
  y: Float
}

type rich__university_calc_calculatorHyphenated__addDoubles__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_calculatorHyphenated__addDoubles__gqlv_action_args
  results: Float
  target: String
}

type rich__university_calc_calculatorHyphenated__addDoubles__gqlv_action_params {
  "X"
  x: rich__university_calc_calculatorHyphenated__addDoubles__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_calculatorHyphenated__addDoubles__y__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated__addDoubles__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Float): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__addDoubles__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Float, y: Float): String
  hidden(x: Float): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__addFloatWrappers__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Float!, y: Float): rich__university_calc_calculatorHyphenated__addFloatWrappers__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_calculatorHyphenated__addFloatWrappers__gqlv_action_params
  validate(x: Float, y: Float): String
}

type rich__university_calc_calculatorHyphenated__addFloatWrappers__gqlv_action_args {
  x: Float
  y: Float
}

type rich__university_calc_calculatorHyphenated__addFloatWrappers__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_calculatorHyphenated__addFloatWrappers__gqlv_action_args
  results: Float
  target: String
}

type rich__university_calc_calculatorHyphenated__addFloatWrappers__gqlv_action_params {
  "X"
  x: rich__university_calc_calculatorHyphenated__addFloatWrappers__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_calculatorHyphenated__addFloatWrappers__y__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated__addFloatWrappers__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Float): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__addFloatWrappers__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Float, y: Float): String
  hidden(x: Float): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__addFloats__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Float!, y: Float!): rich__university_calc_calculatorHyphenated__addFloats__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_calculatorHyphenated__addFloats__gqlv_action_params
  validate(x: Float, y: Float): String
}

type rich__university_calc_calculatorHyphenated__addFloats__gqlv_action_args {
  x: Float
  y: Float
}

type rich__university_calc_calculatorHyphenated__addFloats__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_calculatorHyphenated__addFloats__gqlv_action_args
  results: Float
  target: String
}

type rich__university_calc_calculatorHyphenated__addFloats__gqlv_action_params {
  "X"
  x: rich__university_calc_calculatorHyphenated__addFloats__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_calculatorHyphenated__addFloats__y__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated__addFloats__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Float): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__addFloats__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Float, y: Float): String
  hidden(x: Float): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__addIntegerWrappers__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Int!, y: Int): rich__university_calc_calculatorHyphenated__addIntegerWrappers__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_calculatorHyphenated__addIntegerWrappers__gqlv_action_params
  validate(x: Int, y: Int): String
}

type rich__university_calc_calculatorHyphenated__addIntegerWrappers__gqlv_action_args {
  x: Int
  y: Int
}

type rich__university_calc_calculatorHyphenated__addIntegerWrappers__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_calculatorHyphenated__addIntegerWrappers__gqlv_action_args
  results: Int
  target: String
}

type rich__university_calc_calculatorHyphenated__addIntegerWrappers__gqlv_action_params {
  "X"
  x: rich__university_calc_calculatorHyphenated__addIntegerWrappers__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_calculatorHyphenated__addIntegerWrappers__y__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated__addIntegerWrappers__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Int): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__addIntegerWrappers__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Int, y: Int): String
  hidden(x: Int): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__addIntegers__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Int!, y: Int!): rich__university_calc_calculatorHyphenated__addIntegers__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_calculatorHyphenated__addIntegers__gqlv_action_params
  validate(x: Int, y: Int): String
}

type rich__university_calc_calculatorHyphenated__addIntegers__gqlv_action_args {
  x: Int
  y: Int
}

type rich__university_calc_calculatorHyphenated__addIntegers__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_calculatorHyphenated__addIntegers__gqlv_action_args
  results: Int
  target: String
}

type rich__university_calc_calculatorHyphenated__addIntegers__gqlv_action_params {
  "X"
  x: rich__university_calc_calculatorHyphenated__addIntegers__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_calculatorHyphenated__addIntegers__y__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated__addIntegers__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Int): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__addIntegers__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Int, y: Int): String
  hidden(x: Int): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__addShortWrappers__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Short!, y: Short): rich__university_calc_calculatorHyphenated__addShortWrappers__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_calculatorHyphenated__addShortWrappers__gqlv_action_params
  validate(x: Short, y: Short): String
}

type rich__university_calc_calculatorHyphenated__addShortWrappers__gqlv_action_args {
  x: Short
  y: Short
}

type rich__university_calc_calculatorHyphenated__addShortWrappers__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_calculatorHyphenated__addShortWrappers__gqlv_action_args
  results: Short
  target: String
}

type rich__university_calc_calculatorHyphenated__addShortWrappers__gqlv_action_params {
  "X"
  x: rich__university_calc_calculatorHyphenated__addShortWrappers__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_calculatorHyphenated__addShortWrappers__y__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated__addShortWrappers__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Short): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__addShortWrappers__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Short, y: Short): String
  hidden(x: Short): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__addShorts__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Short!, y: Short!): rich__university_calc_calculatorHyphenated__addShorts__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_calculatorHyphenated__addShorts__gqlv_action_params
  validate(x: Short, y: Short): String
}

type rich__university_calc_calculatorHyphenated__addShorts__gqlv_action_args {
  x: Short
  y: Short
}

type rich__university_calc_calculatorHyphenated__addShorts__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_calculatorHyphenated__addShorts__gqlv_action_args
  results: Short
  target: String
}

type rich__university_calc_calculatorHyphenated__addShorts__gqlv_action_params {
  "X"
  x: rich__university_calc_calculatorHyphenated__addShorts__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_calculatorHyphenated__addShorts__y__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated__addShorts__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Short): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__addShorts__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Short, y: Short): String
  hidden(x: Short): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__and__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Boolean!, y: Boolean!): rich__university_calc_calculatorHyphenated__and__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_calculatorHyphenated__and__gqlv_action_params
  validate(x: Boolean, y: Boolean): String
}

type rich__university_calc_calculatorHyphenated__and__gqlv_action_args {
  x: Boolean
  y: Boolean
}

type rich__university_calc_calculatorHyphenated__and__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_calculatorHyphenated__and__gqlv_action_args
  results: Boolean
  target: String
}

type rich__university_calc_calculatorHyphenated__and__gqlv_action_params {
  "X"
  x: rich__university_calc_calculatorHyphenated__and__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_calculatorHyphenated__and__y__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated__and__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Boolean): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__and__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Boolean, y: Boolean): String
  hidden(x: Boolean): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__concat__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(prefix: String!, suffix: String): rich__university_calc_calculatorHyphenated__concat__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_calculatorHyphenated__concat__gqlv_action_params
  validate(prefix: String, suffix: String): String
}

type rich__university_calc_calculatorHyphenated__concat__gqlv_action_args {
  prefix: String
  suffix: String
}

type rich__university_calc_calculatorHyphenated__concat__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_calculatorHyphenated__concat__gqlv_action_args
  results: String
  target: String
}

type rich__university_calc_calculatorHyphenated__concat__gqlv_action_params {
  "Prefix"
  prefix: rich__university_calc_calculatorHyphenated__concat__prefix__gqlv_action_parameter
  "Suffix"
  suffix: rich__university_calc_calculatorHyphenated__concat__suffix__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated__concat__prefix__gqlv_action_parameter {
  datatype: String
  disabled(prefix: String): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__concat__suffix__gqlv_action_parameter {
  datatype: String
  disabled(prefix: String, suffix: String): String
  hidden(prefix: String): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__localDatePlusDays__date__gqlv_action_parameter {
  datatype: String
  disabled(date: String): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__localDatePlusDays__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(date: String!, numDays: Int!): rich__university_calc_calculatorHyphenated__localDatePlusDays__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_calculatorHyphenated__localDatePlusDays__gqlv_action_params
  validate(date: String, numDays: Int): String
}

type rich__university_calc_calculatorHyphenated__localDatePlusDays__gqlv_action_args {
  date: String
  numDays: Int
}

type rich__university_calc_calculatorHyphenated__localDatePlusDays__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_calculatorHyphenated__localDatePlusDays__gqlv_action_args
  results: String
  target: String
}

type rich__university_calc_calculatorHyphenated__localDatePlusDays__gqlv_action_params {
  "Date"
  date: rich__university_calc_calculatorHyphenated__localDatePlusDays__date__gqlv_action_parameter
  "Num Days"
  numDays: rich__university_calc_calculatorHyphenated__localDatePlusDays__numDays__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated__localDatePlusDays__numDays__gqlv_action_parameter {
  datatype: String
  disabled(date: String, numDays: Int): String
  hidden(date: String): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__localDateTimePlusDaysAndHoursAndMinutes__dateTime__gqlv_action_parameter {
  datatype: String
  disabled(dateTime: String): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__localDateTimePlusDaysAndHoursAndMinutes__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(dateTime: String!, numDays: Int!, numHours: Int!, numMinutes: Int!): rich__university_calc_calculatorHyphenated__localDateTimePlusDaysAndHoursAndMinutes__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_calculatorHyphenated__localDateTimePlusDaysAndHoursAndMinutes__gqlv_action_params
  validate(dateTime: String, numDays: Int, numHours: Int, numMinutes: Int): String
}

type rich__university_calc_calculatorHyphenated__localDateTimePlusDaysAndHoursAndMinutes__gqlv_action_args {
  dateTime: String
  numDays: Int
  numHours: Int
  numMinutes: Int
}

type rich__university_calc_calculatorHyphenated__localDateTimePlusDaysAndHoursAndMinutes__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_calculatorHyphenated__localDateTimePlusDaysAndHoursAndMinutes__gqlv_action_args
  results: String
  target: String
}

type rich__university_calc_calculatorHyphenated__localDateTimePlusDaysAndHoursAndMinutes__gqlv_action_params {
  "Date Time"
  dateTime: rich__university_calc_calculatorHyphenated__localDateTimePlusDaysAndHoursAndMinutes__dateTime__gqlv_action_parameter
  "Num Days"
  numDays: rich__university_calc_calculatorHyphenated__localDateTimePlusDaysAndHoursAndMinutes__numDays__gqlv_action_parameter
  "Num Hours"
  numHours: rich__university_calc_calculatorHyphenated__localDateTimePlusDaysAndHoursAndMinutes__numHours__gqlv_action_parameter
  "Num Minutes"
  numMinutes: rich__university_calc_calculatorHyphenated__localDateTimePlusDaysAndHoursAndMinutes__numMinutes__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated__localDateTimePlusDaysAndHoursAndMinutes__numDays__gqlv_action_parameter {
  datatype: String
  disabled(dateTime: String, numDays: Int): String
  hidden(dateTime: String): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__localDateTimePlusDaysAndHoursAndMinutes__numHours__gqlv_action_parameter {
  datatype: String
  disabled(dateTime: String, numDays: Int, numHours: Int): String
  hidden(dateTime: String, numDays: Int): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__localDateTimePlusDaysAndHoursAndMinutes__numMinutes__gqlv_action_parameter {
  datatype: String
  disabled(dateTime: String, numDays: Int, numHours: Int, numMinutes: Int): String
  hidden(dateTime: String, numDays: Int, numHours: Int): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__localTimePlusHoursAndMinutes__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(numHours: Int!, numMinutes: Int!, time: String!): rich__university_calc_calculatorHyphenated__localTimePlusHoursAndMinutes__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_calculatorHyphenated__localTimePlusHoursAndMinutes__gqlv_action_params
  validate(numHours: Int, numMinutes: Int, time: String): String
}

type rich__university_calc_calculatorHyphenated__localTimePlusHoursAndMinutes__gqlv_action_args {
  numHours: Int
  numMinutes: Int
  time: String
}

type rich__university_calc_calculatorHyphenated__localTimePlusHoursAndMinutes__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_calculatorHyphenated__localTimePlusHoursAndMinutes__gqlv_action_args
  results: String
  target: String
}

type rich__university_calc_calculatorHyphenated__localTimePlusHoursAndMinutes__gqlv_action_params {
  "Num Hours"
  numHours: rich__university_calc_calculatorHyphenated__localTimePlusHoursAndMinutes__numHours__gqlv_action_parameter
  "Num Minutes"
  numMinutes: rich__university_calc_calculatorHyphenated__localTimePlusHoursAndMinutes__numMinutes__gqlv_action_parameter
  "Time"
  time: rich__university_calc_calculatorHyphenated__localTimePlusHoursAndMinutes__time__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated__localTimePlusHoursAndMinutes__numHours__gqlv_action_parameter {
  datatype: String
  disabled(numHours: Int, time: String): String
  hidden(time: String): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__localTimePlusHoursAndMinutes__numMinutes__gqlv_action_parameter {
  datatype: String
  disabled(numHours: Int, numMinutes: Int, time: String): String
  hidden(numHours: Int, time: String): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__localTimePlusHoursAndMinutes__time__gqlv_action_parameter {
  datatype: String
  disabled(time: String): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__nextMonth__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(month: rich__org_apache_causeway_viewer_graphql_viewer_test_domain_calc_Month__gqlv_enum!): rich__university_calc_calculatorHyphenated__nextMonth__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_calculatorHyphenated__nextMonth__gqlv_action_params
  validate(month: rich__org_apache_causeway_viewer_graphql_viewer_test_domain_calc_Month__gqlv_enum): String
}

type rich__university_calc_calculatorHyphenated__nextMonth__gqlv_action_args {
  month: rich__org_apache_causeway_viewer_graphql_viewer_test_domain_calc_Month__gqlv_enum
}

type rich__university_calc_calculatorHyphenated__nextMonth__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_calculatorHyphenated__nextMonth__gqlv_action_args
  results: rich__org_apache_causeway_viewer_graphql_viewer_test_domain_calc_Month__gqlv_enum
  target: String
}

type rich__university_calc_calculatorHyphenated__nextMonth__gqlv_action_params {
  "Month"
  month: rich__university_calc_calculatorHyphenated__nextMonth__month__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated__nextMonth__month__gqlv_action_parameter {
  choices: [rich__org_apache_causeway_viewer_graphql_viewer_test_domain_calc_Month__gqlv_enum]
  datatype: String
  disabled(month: rich__org_apache_causeway_viewer_graphql_viewer_test_domain_calc_Month__gqlv_enum): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__not__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Boolean!): rich__university_calc_calculatorHyphenated__not__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_calculatorHyphenated__not__gqlv_action_params
  validate(x: Boolean): String
}

type rich__university_calc_calculatorHyphenated__not__gqlv_action_args {
  x: Boolean
}

type rich__university_calc_calculatorHyphenated__not__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_calculatorHyphenated__not__gqlv_action_args
  results: Boolean
  target: String
}

type rich__university_calc_calculatorHyphenated__not__gqlv_action_params {
  "X"
  x: rich__university_calc_calculatorHyphenated__not__x__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated__not__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Boolean): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__offsetDateTimePlusDaysAndHoursAndMinutes__dateTime__gqlv_action_parameter {
  datatype: String
  disabled(dateTime: DateTime): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__offsetDateTimePlusDaysAndHoursAndMinutes__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(dateTime: DateTime!, numDays: Int!, numHours: Int!, numMinutes: Int!): rich__university_calc_calculatorHyphenated__offsetDateTimePlusDaysAndHoursAndMinutes__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_calculatorHyphenated__offsetDateTimePlusDaysAndHoursAndMinutes__gqlv_action_params
  validate(dateTime: DateTime, numDays: Int, numHours: Int, numMinutes: Int): String
}

type rich__university_calc_calculatorHyphenated__offsetDateTimePlusDaysAndHoursAndMinutes__gqlv_action_args {
  dateTime: DateTime
  numDays: Int
  numHours: Int
  numMinutes: Int
}

type rich__university_calc_calculatorHyphenated__offsetDateTimePlusDaysAndHoursAndMinutes__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_calculatorHyphenated__offsetDateTimePlusDaysAndHoursAndMinutes__gqlv_action_args
  results: DateTime
  target: String
}

type rich__university_calc_calculatorHyphenated__offsetDateTimePlusDaysAndHoursAndMinutes__gqlv_action_params {
  "Date Time"
  dateTime: rich__university_calc_calculatorHyphenated__offsetDateTimePlusDaysAndHoursAndMinutes__dateTime__gqlv_action_parameter
  "Num Days"
  numDays: rich__university_calc_calculatorHyphenated__offsetDateTimePlusDaysAndHoursAndMinutes__numDays__gqlv_action_parameter
  "Num Hours"
  numHours: rich__university_calc_calculatorHyphenated__offsetDateTimePlusDaysAndHoursAndMinutes__numHours__gqlv_action_parameter
  "Num Minutes"
  numMinutes: rich__university_calc_calculatorHyphenated__offsetDateTimePlusDaysAndHoursAndMinutes__numMinutes__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated__offsetDateTimePlusDaysAndHoursAndMinutes__numDays__gqlv_action_parameter {
  datatype: String
  disabled(dateTime: DateTime, numDays: Int): String
  hidden(dateTime: DateTime): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__offsetDateTimePlusDaysAndHoursAndMinutes__numHours__gqlv_action_parameter {
  datatype: String
  disabled(dateTime: DateTime, numDays: Int, numHours: Int): String
  hidden(dateTime: DateTime, numDays: Int): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__offsetDateTimePlusDaysAndHoursAndMinutes__numMinutes__gqlv_action_parameter {
  datatype: String
  disabled(dateTime: DateTime, numDays: Int, numHours: Int, numMinutes: Int): String
  hidden(dateTime: DateTime, numDays: Int, numHours: Int): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__offsetTimePlusHoursAndMinutes__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(numHours: Int!, numMinutes: Int!, time: Time!): rich__university_calc_calculatorHyphenated__offsetTimePlusHoursAndMinutes__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_calculatorHyphenated__offsetTimePlusHoursAndMinutes__gqlv_action_params
  validate(numHours: Int, numMinutes: Int, time: Time): String
}

type rich__university_calc_calculatorHyphenated__offsetTimePlusHoursAndMinutes__gqlv_action_args {
  numHours: Int
  numMinutes: Int
  time: Time
}

type rich__university_calc_calculatorHyphenated__offsetTimePlusHoursAndMinutes__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_calculatorHyphenated__offsetTimePlusHoursAndMinutes__gqlv_action_args
  results: Time
  target: String
}

type rich__university_calc_calculatorHyphenated__offsetTimePlusHoursAndMinutes__gqlv_action_params {
  "Num Hours"
  numHours: rich__university_calc_calculatorHyphenated__offsetTimePlusHoursAndMinutes__numHours__gqlv_action_parameter
  "Num Minutes"
  numMinutes: rich__university_calc_calculatorHyphenated__offsetTimePlusHoursAndMinutes__numMinutes__gqlv_action_parameter
  "Time"
  time: rich__university_calc_calculatorHyphenated__offsetTimePlusHoursAndMinutes__time__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated__offsetTimePlusHoursAndMinutes__numHours__gqlv_action_parameter {
  datatype: String
  disabled(numHours: Int, time: Time): String
  hidden(time: Time): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__offsetTimePlusHoursAndMinutes__numMinutes__gqlv_action_parameter {
  datatype: String
  disabled(numHours: Int, numMinutes: Int, time: Time): String
  hidden(numHours: Int, time: Time): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__offsetTimePlusHoursAndMinutes__time__gqlv_action_parameter {
  datatype: String
  disabled(time: Time): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__or__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(x: Boolean!, y: Boolean!): rich__university_calc_calculatorHyphenated__or__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_calculatorHyphenated__or__gqlv_action_params
  validate(x: Boolean, y: Boolean): String
}

type rich__university_calc_calculatorHyphenated__or__gqlv_action_args {
  x: Boolean
  y: Boolean
}

type rich__university_calc_calculatorHyphenated__or__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_calculatorHyphenated__or__gqlv_action_args
  results: Boolean
  target: String
}

type rich__university_calc_calculatorHyphenated__or__gqlv_action_params {
  "X"
  x: rich__university_calc_calculatorHyphenated__or__x__gqlv_action_parameter
  "Y"
  y: rich__university_calc_calculatorHyphenated__or__y__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated__or__x__gqlv_action_parameter {
  datatype: String
  disabled(x: Boolean): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__or__y__gqlv_action_parameter {
  datatype: String
  disabled(x: Boolean, y: Boolean): String
  hidden(x: Boolean): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__someLocale__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke: rich__university_calc_calculatorHyphenated__someLocale__gqlv_action_invoke
  validate: String
}

type rich__university_calc_calculatorHyphenated__someLocale__gqlv_action_invoke {
  results: String
  target: String
}

type rich__university_calc_calculatorHyphenated__someUrl__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke: rich__university_calc_calculatorHyphenated__someUrl__gqlv_action_invoke
  validate: String
}

type rich__university_calc_calculatorHyphenated__someUrl__gqlv_action_invoke {
  results: String
  target: String
}

type rich__university_calc_calculatorHyphenated__someUuid__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke: rich__university_calc_calculatorHyphenated__someUuid__gqlv_action_invoke
  validate: String
}

type rich__university_calc_calculatorHyphenated__someUuid__gqlv_action_invoke {
  results: UUID
  target: String
}

type rich__university_calc_calculatorHyphenated__zonedDateTimePlusDaysAndHoursAndMinutes__dateTime__gqlv_action_parameter {
  datatype: String
  disabled(dateTime: String): String
  hidden: Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__zonedDateTimePlusDaysAndHoursAndMinutes__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(dateTime: String!, numDays: Int!, numHours: Int!, numMinutes: Int!): rich__university_calc_calculatorHyphenated__zonedDateTimePlusDaysAndHoursAndMinutes__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_calc_calculatorHyphenated__zonedDateTimePlusDaysAndHoursAndMinutes__gqlv_action_params
  validate(dateTime: String, numDays: Int, numHours: Int, numMinutes: Int): String
}

type rich__university_calc_calculatorHyphenated__zonedDateTimePlusDaysAndHoursAndMinutes__gqlv_action_args {
  dateTime: String
  numDays: Int
  numHours: Int
  numMinutes: Int
}

type rich__university_calc_calculatorHyphenated__zonedDateTimePlusDaysAndHoursAndMinutes__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_calc_calculatorHyphenated__zonedDateTimePlusDaysAndHoursAndMinutes__gqlv_action_args
  results: String
  target: String
}

type rich__university_calc_calculatorHyphenated__zonedDateTimePlusDaysAndHoursAndMinutes__gqlv_action_params {
  "Date Time"
  dateTime: rich__university_calc_calculatorHyphenated__zonedDateTimePlusDaysAndHoursAndMinutes__dateTime__gqlv_action_parameter
  "Num Days"
  numDays: rich__university_calc_calculatorHyphenated__zonedDateTimePlusDaysAndHoursAndMinutes__numDays__gqlv_action_parameter
  "Num Hours"
  numHours: rich__university_calc_calculatorHyphenated__zonedDateTimePlusDaysAndHoursAndMinutes__numHours__gqlv_action_parameter
  "Num Minutes"
  numMinutes: rich__university_calc_calculatorHyphenated__zonedDateTimePlusDaysAndHoursAndMinutes__numMinutes__gqlv_action_parameter
}

type rich__university_calc_calculatorHyphenated__zonedDateTimePlusDaysAndHoursAndMinutes__numDays__gqlv_action_parameter {
  datatype: String
  disabled(dateTime: String, numDays: Int): String
  hidden(dateTime: String): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__zonedDateTimePlusDaysAndHoursAndMinutes__numHours__gqlv_action_parameter {
  datatype: String
  disabled(dateTime: String, numDays: Int, numHours: Int): String
  hidden(dateTime: String, numDays: Int): Boolean
  validity: String
}

type rich__university_calc_calculatorHyphenated__zonedDateTimePlusDaysAndHoursAndMinutes__numMinutes__gqlv_action_parameter {
  datatype: String
  disabled(dateTime: String, numDays: Int, numHours: Int, numMinutes: Int): String
  hidden(dateTime: String, numDays: Int, numHours: Int): Boolean
  validity: String
}

"University department specializing in a field of study"
type rich__university_dept_Department {
  "Object metadata"
  _meta: rich__university_dept_Department__gqlv_meta
  "University department specializing in a field of study"
  addStaffMember: rich__university_dept_Department__addStaffMember__gqlv_action
  "University department specializing in a field of study"
  addStaffMembers: rich__university_dept_Department__addStaffMembers__gqlv_action
  "University department specializing in a field of study"
  changeDeptHead: rich__university_dept_Department__changeDeptHead__gqlv_action
  "University department specializing in a field of study"
  changeName: rich__university_dept_Department__changeName__gqlv_action
  "Departmental head, responsible for curriculum, research, funding and staff"
  deptHead: rich__university_dept_Department__deptHead__gqlv_property
  "Name"
  name: rich__university_dept_Department__name__gqlv_property
  "University department specializing in a field of study"
  removeStaffMember: rich__university_dept_Department__removeStaffMember__gqlv_action
  "Staff member of a university department, responsible for delivering lectures, tutorials, exam invigilation and candidate interviews"
  staffMembers: rich__university_dept_Department__staffMembers__gqlv_collection
}

"University department specializing in a field of study"
type rich__university_dept_Department__addStaffMember__gqlv_action {
  disabled: String
  hidden: Boolean
  invokeIdempotent(staffMember: rich__university_dept_StaffMember__gqlv_input!): rich__university_dept_Department__addStaffMember__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_dept_Department__addStaffMember__gqlv_action_params
  validate(staffMember: rich__university_dept_StaffMember__gqlv_input): String
}

type rich__university_dept_Department__addStaffMember__gqlv_action_args {
  staffMember: rich__university_dept_StaffMember
}

type rich__university_dept_Department__addStaffMember__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_dept_Department__addStaffMember__gqlv_action_args
  results: rich__university_dept_Department
  target: rich__university_dept_Department
}

type rich__university_dept_Department__addStaffMember__gqlv_action_params {
  "Staff member of a university department, responsible for delivering lectures, tutorials, exam invigilation and candidate interviews"
  staffMember: rich__university_dept_Department__addStaffMember__staffMember__gqlv_action_parameter
}

type rich__university_dept_Department__addStaffMember__staffMember__gqlv_action_parameter {
  autoComplete(search: String!): [rich__university_dept_StaffMember]
  datatype: String
  disabled(staffMember: rich__university_dept_StaffMember__gqlv_input): String
  hidden: Boolean
  validity: String
}

"University department specializing in a field of study"
type rich__university_dept_Department__addStaffMembers__gqlv_action {
  disabled: String
  hidden: Boolean
  invokeIdempotent(staffMembers: [rich__university_dept_StaffMember__gqlv_input]): rich__university_dept_Department__addStaffMembers__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_dept_Department__addStaffMembers__gqlv_action_params
  validate(staffMembers: [rich__university_dept_StaffMember__gqlv_input]): String
}

type rich__university_dept_Department__addStaffMembers__gqlv_action_args {
  staffMembers: [rich__university_dept_StaffMember]
}

type rich__university_dept_Department__addStaffMembers__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_dept_Department__addStaffMembers__gqlv_action_args
  results: rich__university_dept_Department
  target: rich__university_dept_Department
}

type rich__university_dept_Department__addStaffMembers__gqlv_action_params {
  "Staff member of a university department, responsible for delivering lectures, tutorials, exam invigilation and candidate interviews"
  staffMembers: rich__university_dept_Department__addStaffMembers__staffMembers__gqlv_action_parameter
}

type rich__university_dept_Department__addStaffMembers__staffMembers__gqlv_action_parameter {
  choices: [rich__university_dept_StaffMember]
  datatype: String
  disabled(staffMembers: [rich__university_dept_StaffMember__gqlv_input]): String
  hidden: Boolean
  validity: String
}

"University department specializing in a field of study"
type rich__university_dept_Department__changeDeptHead__gqlv_action {
  disabled: String
  hidden: Boolean
  invokeIdempotent(newDeptHead: rich__university_dept_DeptHead__gqlv_input!): rich__university_dept_Department__changeDeptHead__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_dept_Department__changeDeptHead__gqlv_action_params
  validate(newDeptHead: rich__university_dept_DeptHead__gqlv_input): String
}

type rich__university_dept_Department__changeDeptHead__gqlv_action_args {
  newDeptHead: rich__university_dept_DeptHead
}

type rich__university_dept_Department__changeDeptHead__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_dept_Department__changeDeptHead__gqlv_action_args
  results: rich__university_dept_Department
  target: rich__university_dept_Department
}

type rich__university_dept_Department__changeDeptHead__gqlv_action_params {
  "Departmental head, responsible for curriculum, research, funding and staff"
  newDeptHead: rich__university_dept_Department__changeDeptHead__newDeptHead__gqlv_action_parameter
}

type rich__university_dept_Department__changeDeptHead__newDeptHead__gqlv_action_parameter {
  autoComplete(search: String!): [rich__university_dept_DeptHead]
  datatype: String
  default: rich__university_dept_DeptHead
  disabled(newDeptHead: rich__university_dept_DeptHead__gqlv_input): String
  hidden: Boolean
  validity: String
}

"University department specializing in a field of study"
type rich__university_dept_Department__changeName__gqlv_action {
  disabled: String
  hidden: Boolean
  invokeIdempotent(newName: String!): rich__university_dept_Department__changeName__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_dept_Department__changeName__gqlv_action_params
  validate(newName: String): String
}

type rich__university_dept_Department__changeName__gqlv_action_args {
  newName: String
}

type rich__university_dept_Department__changeName__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_dept_Department__changeName__gqlv_action_args
  results: rich__university_dept_Department
  target: rich__university_dept_Department
}

type rich__university_dept_Department__changeName__gqlv_action_params {
  "New Name"
  newName: rich__university_dept_Department__changeName__newName__gqlv_action_parameter
}

type rich__university_dept_Department__changeName__newName__gqlv_action_parameter {
  datatype: String
  default: String
  disabled(newName: String): String
  hidden: Boolean
  validity: String
}

"Departmental head, responsible for curriculum, research, funding and staff"
type rich__university_dept_Department__deptHead__gqlv_property {
  autoComplete(search: String!): [rich__university_dept_DeptHead]
  datatype: String
  disabled: String
  get: rich__university_dept_DeptHead
  hidden: Boolean
  set(deptHead: rich__university_dept_DeptHead__gqlv_input): rich__university_dept_Department
  validate(deptHead: rich__university_dept_DeptHead__gqlv_input): String
}

type rich__university_dept_Department__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
  version: String
}

type rich__university_dept_Department__name__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(name: String!): rich__university_dept_Department
  validate(name: String): String
}

"University department specializing in a field of study"
type rich__university_dept_Department__removeStaffMember__gqlv_action {
  disabled: String
  hidden: Boolean
  invokeIdempotent(staffMember: rich__university_dept_StaffMember__gqlv_input!): rich__university_dept_Department__removeStaffMember__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_dept_Department__removeStaffMember__gqlv_action_params
  validate(staffMember: rich__university_dept_StaffMember__gqlv_input): String
}

type rich__university_dept_Department__removeStaffMember__gqlv_action_args {
  staffMember: rich__university_dept_StaffMember
}

type rich__university_dept_Department__removeStaffMember__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_dept_Department__removeStaffMember__gqlv_action_args
  results: rich__university_dept_Department
  target: rich__university_dept_Department
}

type rich__university_dept_Department__removeStaffMember__gqlv_action_params {
  "Staff member of a university department, responsible for delivering lectures, tutorials, exam invigilation and candidate interviews"
  staffMember: rich__university_dept_Department__removeStaffMember__staffMember__gqlv_action_parameter
}

type rich__university_dept_Department__removeStaffMember__staffMember__gqlv_action_parameter {
  choices: [rich__university_dept_StaffMember]
  datatype: String
  disabled(staffMember: rich__university_dept_StaffMember__gqlv_input): String
  hidden: Boolean
  validity: String
}

"Staff member of a university department, responsible for delivering lectures, tutorials, exam invigilation and candidate interviews"
type rich__university_dept_Department__staffMembers__gqlv_collection {
  datatype: String
  disabled: String
  get: [rich__university_dept_StaffMember]
  hidden: Boolean
}

type rich__university_dept_Departments {
  "University department specializing in a field of study"
  createDepartment: rich__university_dept_Departments__createDepartment__gqlv_action
  "University department specializing in a field of study"
  findAllDepartments: rich__university_dept_Departments__findAllDepartments__gqlv_action
  "University department specializing in a field of study"
  findDepartmentByName: rich__university_dept_Departments__findDepartmentByName__gqlv_action
}

type rich__university_dept_Departments__createDepartment__deptHead__gqlv_action_parameter {
  autoComplete(name: String, search: String!): [rich__university_dept_DeptHead]
  datatype: String
  disabled(deptHead: rich__university_dept_DeptHead__gqlv_input, name: String): String
  hidden(name: String): Boolean
  validity: String
}

"University department specializing in a field of study"
type rich__university_dept_Departments__createDepartment__gqlv_action {
  disabled: String
  hidden: Boolean
  invokeNonIdempotent(deptHead: rich__university_dept_DeptHead__gqlv_input, name: String!): rich__university_dept_Departments__createDepartment__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_dept_Departments__createDepartment__gqlv_action_params
  validate(deptHead: rich__university_dept_DeptHead__gqlv_input, name: String): String
}

type rich__university_dept_Departments__createDepartment__gqlv_action_args {
  deptHead: rich__university_dept_DeptHead
  name: String
}

type rich__university_dept_Departments__createDepartment__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_dept_Departments__createDepartment__gqlv_action_args
  results: rich__university_dept_Department
  target: String
}

type rich__university_dept_Departments__createDepartment__gqlv_action_params {
  "Departmental head, responsible for curriculum, research, funding and staff"
  deptHead: rich__university_dept_Departments__createDepartment__deptHead__gqlv_action_parameter
  "Name"
  name: rich__university_dept_Departments__createDepartment__name__gqlv_action_parameter
}

type rich__university_dept_Departments__createDepartment__name__gqlv_action_parameter {
  datatype: String
  disabled(name: String): String
  hidden: Boolean
  validity: String
}

"University department specializing in a field of study"
type rich__university_dept_Departments__findAllDepartments__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke: rich__university_dept_Departments__findAllDepartments__gqlv_action_invoke
  validate: String
}

type rich__university_dept_Departments__findAllDepartments__gqlv_action_invoke {
  results: [rich__university_dept_Department]
  target: String
}

"University department specializing in a field of study"
type rich__university_dept_Departments__findDepartmentByName__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(name: String!): rich__university_dept_Departments__findDepartmentByName__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_dept_Departments__findDepartmentByName__gqlv_action_params
  validate(name: String): String
}

type rich__university_dept_Departments__findDepartmentByName__gqlv_action_args {
  name: String
}

type rich__university_dept_Departments__findDepartmentByName__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_dept_Departments__findDepartmentByName__gqlv_action_args
  results: rich__university_dept_Department
  target: String
}

type rich__university_dept_Departments__findDepartmentByName__gqlv_action_params {
  "Name"
  name: rich__university_dept_Departments__findDepartmentByName__name__gqlv_action_parameter
}

type rich__university_dept_Departments__findDepartmentByName__name__gqlv_action_parameter {
  datatype: String
  disabled(name: String): String
  hidden: Boolean
  validity: String
}

"Departmental head, responsible for curriculum, research, funding and staff"
type rich__university_dept_DeptHead {
  "Object metadata"
  _meta: rich__university_dept_DeptHead__gqlv_meta
  "Departmental head, responsible for curriculum, research, funding and staff"
  changeDepartment: rich__university_dept_DeptHead__changeDepartment__gqlv_action
  "Departmental head, responsible for curriculum, research, funding and staff"
  changeName: rich__university_dept_DeptHead__changeName__gqlv_action
  "University department specializing in a field of study"
  department: rich__university_dept_DeptHead__department__gqlv_property
  "Name"
  name: rich__university_dept_DeptHead__name__gqlv_property
}

type rich__university_dept_DeptHead__changeDepartment__department__gqlv_action_parameter {
  choices: [rich__university_dept_Department]
  datatype: String
  disabled(department: rich__university_dept_Department__gqlv_input): String
  hidden: Boolean
  validity: String
}

"Departmental head, responsible for curriculum, research, funding and staff"
type rich__university_dept_DeptHead__changeDepartment__gqlv_action {
  disabled: String
  hidden: Boolean
  invokeIdempotent(department: rich__university_dept_Department__gqlv_input!): rich__university_dept_DeptHead__changeDepartment__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_dept_DeptHead__changeDepartment__gqlv_action_params
  validate(department: rich__university_dept_Department__gqlv_input): String
}

type rich__university_dept_DeptHead__changeDepartment__gqlv_action_args {
  department: rich__university_dept_Department
}

type rich__university_dept_DeptHead__changeDepartment__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_dept_DeptHead__changeDepartment__gqlv_action_args
  results: rich__university_dept_DeptHead
  target: rich__university_dept_DeptHead
}

type rich__university_dept_DeptHead__changeDepartment__gqlv_action_params {
  "University department specializing in a field of study"
  department: rich__university_dept_DeptHead__changeDepartment__department__gqlv_action_parameter
}

"Departmental head, responsible for curriculum, research, funding and staff"
type rich__university_dept_DeptHead__changeName__gqlv_action {
  disabled: String
  hidden: Boolean
  invokeIdempotent(newName: String!): rich__university_dept_DeptHead__changeName__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_dept_DeptHead__changeName__gqlv_action_params
  validate(newName: String): String
}

type rich__university_dept_DeptHead__changeName__gqlv_action_args {
  newName: String
}

type rich__university_dept_DeptHead__changeName__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_dept_DeptHead__changeName__gqlv_action_args
  results: rich__university_dept_DeptHead
  target: rich__university_dept_DeptHead
}

type rich__university_dept_DeptHead__changeName__gqlv_action_params {
  "New Name"
  newName: rich__university_dept_DeptHead__changeName__newName__gqlv_action_parameter
}

type rich__university_dept_DeptHead__changeName__newName__gqlv_action_parameter {
  datatype: String
  default: String
  disabled(newName: String): String
  hidden: Boolean
  validity: String
}

"University department specializing in a field of study"
type rich__university_dept_DeptHead__department__gqlv_property {
  choices(department: rich__university_dept_Department__gqlv_input): [rich__university_dept_Department]
  datatype: String
  disabled: String
  get: rich__university_dept_Department
  hidden: Boolean
  set(department: rich__university_dept_Department__gqlv_input): rich__university_dept_DeptHead
  validate(department: rich__university_dept_Department__gqlv_input): String
}

type rich__university_dept_DeptHead__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
  version: String
}

type rich__university_dept_DeptHead__name__gqlv_property {
  datatype: String
  disabled: String
  get: String
  hidden: Boolean
  set(name: String): rich__university_dept_DeptHead
  validate(name: String): String
}

type rich__university_dept_DeptHeads {
  "Departmental head, responsible for curriculum, research, funding and staff"
  findAllHeads: rich__university_dept_DeptHeads__findAllHeads__gqlv_action
  "Departmental head, responsible for curriculum, research, funding and staff"
  findHeadByName: rich__university_dept_DeptHeads__findHeadByName__gqlv_action
}

"Departmental head, responsible for curriculum, research, funding and staff"
type rich__university_dept_DeptHeads__findAllHeads__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke: rich__university_dept_DeptHeads__findAllHeads__gqlv_action_invoke
  validate: String
}

type rich__university_dept_DeptHeads__findAllHeads__gqlv_action_invoke {
  results: [rich__university_dept_DeptHead]
  target: String
}

"Departmental head, responsible for curriculum, research, funding and staff"
type rich__university_dept_DeptHeads__findHeadByName__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(name: String!): rich__university_dept_DeptHeads__findHeadByName__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_dept_DeptHeads__findHeadByName__gqlv_action_params
  validate(name: String): String
}

type rich__university_dept_DeptHeads__findHeadByName__gqlv_action_args {
  name: String
}

type rich__university_dept_DeptHeads__findHeadByName__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_dept_DeptHeads__findHeadByName__gqlv_action_args
  results: rich__university_dept_DeptHead
  target: String
}

type rich__university_dept_DeptHeads__findHeadByName__gqlv_action_params {
  "Name"
  name: rich__university_dept_DeptHeads__findHeadByName__name__gqlv_action_parameter
}

type rich__university_dept_DeptHeads__findHeadByName__name__gqlv_action_parameter {
  datatype: String
  disabled(name: String): String
  hidden: Boolean
  validity: String
}

type rich__university_dept_People {
  "Find Named"
  findNamed: rich__university_dept_People__findNamed__gqlv_action
  "Name Of"
  nameOf: rich__university_dept_People__nameOf__gqlv_action
}

type rich__university_dept_People__findNamed__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(name: String!): rich__university_dept_People__findNamed__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_dept_People__findNamed__gqlv_action_params
  validate(name: String): String
}

type rich__university_dept_People__findNamed__gqlv_action_args {
  name: String
}

type rich__university_dept_People__findNamed__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_dept_People__findNamed__gqlv_action_args
  results: rich__university_dept_Person
  target: String
}

type rich__university_dept_People__findNamed__gqlv_action_params {
  "Name"
  name: rich__university_dept_People__findNamed__name__gqlv_action_parameter
}

type rich__university_dept_People__findNamed__name__gqlv_action_parameter {
  datatype: String
  disabled(name: String): String
  hidden: Boolean
  validity: String
}

type rich__university_dept_People__nameOf__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(person: rich__university_dept_Person__gqlv_input!): rich__university_dept_People__nameOf__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_dept_People__nameOf__gqlv_action_params
  validate(person: rich__university_dept_Person__gqlv_input): String
}

type rich__university_dept_People__nameOf__gqlv_action_args {
  person: rich__university_dept_Person
}

type rich__university_dept_People__nameOf__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_dept_People__nameOf__gqlv_action_args
  results: String
  target: String
}

type rich__university_dept_People__nameOf__gqlv_action_params {
  "Person"
  person: rich__university_dept_People__nameOf__person__gqlv_action_parameter
}

type rich__university_dept_People__nameOf__person__gqlv_action_parameter {
  datatype: String
  disabled(person: rich__university_dept_Person__gqlv_input): String
  hidden: Boolean
  validity: String
}

type rich__university_dept_Person {
  "Object metadata"
  _meta: rich__university_dept_Person__gqlv_meta
  "Name"
  name: rich__university_dept_Person__name__gqlv_property
}

type rich__university_dept_Person__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type rich__university_dept_Person__name__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(name: String!): rich__university_dept_Person
  validate(name: String): String
}

type rich__university_dept_Staff {
  "Staff member of a university department, responsible for delivering lectures, tutorials, exam invigilation and candidate interviews"
  createStaffMember: rich__university_dept_Staff__createStaffMember__gqlv_action
  "Staff member of a university department, responsible for delivering lectures, tutorials, exam invigilation and candidate interviews"
  findAllStaffMembers: rich__university_dept_Staff__findAllStaffMembers__gqlv_action
  "Staff member of a university department, responsible for delivering lectures, tutorials, exam invigilation and candidate interviews"
  findStaffMemberByName: rich__university_dept_Staff__findStaffMemberByName__gqlv_action
}

"Staff member of a university department, responsible for delivering lectures, tutorials, exam invigilation and candidate interviews"
type rich__university_dept_StaffMember {
  "Object metadata"
  _meta: rich__university_dept_StaffMember__gqlv_meta
  "University department specializing in a field of study"
  department: rich__university_dept_StaffMember__department__gqlv_property
  "Grade"
  grade: rich__university_dept_StaffMember__grade__gqlv_property
  "Name"
  name: rich__university_dept_StaffMember__name__gqlv_property
  "Photo"
  photo: rich__university_dept_StaffMember__photo__gqlv_property
}

"University department specializing in a field of study"
type rich__university_dept_StaffMember__department__gqlv_property {
  choices(department: rich__university_dept_Department__gqlv_input): [rich__university_dept_Department]
  datatype: String
  disabled: String
  get: rich__university_dept_Department
  hidden: Boolean
  set(department: rich__university_dept_Department__gqlv_input): rich__university_dept_StaffMember
  validate(department: rich__university_dept_Department__gqlv_input): String
}

type rich__university_dept_StaffMember__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
  version: String
}

type rich__university_dept_StaffMember__grade__gqlv_property {
  choices(grade: rich__org_apache_causeway_viewer_graphql_viewer_test_domain_dept_Grade__gqlv_enum): [rich__org_apache_causeway_viewer_graphql_viewer_test_domain_dept_Grade__gqlv_enum]
  datatype: String
  disabled: String
  get: rich__org_apache_causeway_viewer_graphql_viewer_test_domain_dept_Grade__gqlv_enum!
  hidden: Boolean
  set(grade: rich__org_apache_causeway_viewer_graphql_viewer_test_domain_dept_Grade__gqlv_enum!): rich__university_dept_StaffMember
  validate(grade: rich__org_apache_causeway_viewer_graphql_viewer_test_domain_dept_Grade__gqlv_enum): String
}

type rich__university_dept_StaffMember__name__gqlv_property {
  datatype: String
  disabled: String
  get: String!
  hidden: Boolean
  set(name: String!): rich__university_dept_StaffMember
  validate(name: String): String
}

type rich__university_dept_StaffMember__photo__gqlv_property {
  datatype: String
  disabled: String
  get: rich__university_dept_StaffMember__photo__gqlv_property_lob
  hidden: Boolean
  set(photo: String): rich__university_dept_StaffMember
  validate(photo: String): String
}

type rich__university_dept_StaffMember__photo__gqlv_property_lob {
  bytes: String
  mimeType: String
  name: String
}

type rich__university_dept_Staff__createStaffMember__department__gqlv_action_parameter {
  choices(name: String): [rich__university_dept_Department]
  datatype: String
  disabled(department: rich__university_dept_Department__gqlv_input, name: String): String
  hidden(name: String): Boolean
  validity: String
}

"Staff member of a university department, responsible for delivering lectures, tutorials, exam invigilation and candidate interviews"
type rich__university_dept_Staff__createStaffMember__gqlv_action {
  disabled: String
  hidden: Boolean
  invokeNonIdempotent(department: rich__university_dept_Department__gqlv_input!, name: String!): rich__university_dept_Staff__createStaffMember__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_dept_Staff__createStaffMember__gqlv_action_params
  validate(department: rich__university_dept_Department__gqlv_input, name: String): String
}

type rich__university_dept_Staff__createStaffMember__gqlv_action_args {
  department: rich__university_dept_Department
  name: String
}

type rich__university_dept_Staff__createStaffMember__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_dept_Staff__createStaffMember__gqlv_action_args
  results: rich__university_dept_StaffMember
  target: String
}

type rich__university_dept_Staff__createStaffMember__gqlv_action_params {
  "University department specializing in a field of study"
  department: rich__university_dept_Staff__createStaffMember__department__gqlv_action_parameter
  "Name"
  name: rich__university_dept_Staff__createStaffMember__name__gqlv_action_parameter
}

type rich__university_dept_Staff__createStaffMember__name__gqlv_action_parameter {
  datatype: String
  disabled(name: String): String
  hidden: Boolean
  validity: String
}

"Staff member of a university department, responsible for delivering lectures, tutorials, exam invigilation and candidate interviews"
type rich__university_dept_Staff__findAllStaffMembers__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke: rich__university_dept_Staff__findAllStaffMembers__gqlv_action_invoke
  validate: String
}

type rich__university_dept_Staff__findAllStaffMembers__gqlv_action_invoke {
  results: [rich__university_dept_StaffMember]
  target: String
}

"Staff member of a university department, responsible for delivering lectures, tutorials, exam invigilation and candidate interviews"
type rich__university_dept_Staff__findStaffMemberByName__gqlv_action {
  disabled: String
  hidden: Boolean
  invoke(name: String!): rich__university_dept_Staff__findStaffMemberByName__gqlv_action_invoke
  "Parameters of this action"
  params: rich__university_dept_Staff__findStaffMemberByName__gqlv_action_params
  validate(name: String): String
}

type rich__university_dept_Staff__findStaffMemberByName__gqlv_action_args {
  name: String
}

type rich__university_dept_Staff__findStaffMemberByName__gqlv_action_invoke {
  "Arguments used to invoke this action"
  args: rich__university_dept_Staff__findStaffMemberByName__gqlv_action_args
  results: rich__university_dept_StaffMember
  target: String
}

type rich__university_dept_Staff__findStaffMemberByName__gqlv_action_params {
  "Name"
  name: rich__university_dept_Staff__findStaffMemberByName__name__gqlv_action_parameter
}

type rich__university_dept_Staff__findStaffMemberByName__name__gqlv_action_parameter {
  datatype: String
  disabled(name: String): String
  hidden: Boolean
  validity: String
}

type simple__causeway_applib_DomainObjectList {
  "Object metadata"
  _meta: simple__causeway_applib_DomainObjectList__gqlv_meta
  actionArguments: String
  actionId: String
  actionOwningFqcn: String
  elementTypeFqcn: String!
  title: String!
}

type simple__causeway_applib_DomainObjectList__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__causeway_applib_MetamodelInspectView {
  "Object metadata"
  _meta: simple__causeway_applib_MetamodelInspectView__gqlv_meta
  details: String!
  tree: String!
}

type simple__causeway_applib_MetamodelInspectView__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__causeway_applib_RoleMemento {
  "Object metadata"
  _meta: simple__causeway_applib_RoleMemento__gqlv_meta
  description: String!
  name: String!
}

type simple__causeway_applib_RoleMemento__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__causeway_applib_UserMemento {
  "Object metadata"
  _meta: simple__causeway_applib_UserMemento__gqlv_meta
  authenticationCode: String!
  authenticationSource: rich__org_apache_causeway_applib_services_user_UserMemento_AuthenticationSource__gqlv_enum!
  avatarUrl: String
  isImpersonating: Boolean!
  languageLocale: String
  multiTenancyToken: String
  name: String!
  numberFormatLocale: String
  realName: String
  "roles associated with this user"
  roles: [simple__causeway_applib_RoleMemento]
  timeFormatLocale: String
}

type simple__causeway_applib_UserMemento__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__causeway_applib_UserMenu {
  "Returns your user account details"
  me: simple__causeway_applib_UserMemento
}

type simple__causeway_conf_ConfigurationMenu {
  "Configuration"
  configuration: simple__causeway_conf_ConfigurationViewmodel
}

type simple__causeway_conf_ConfigurationProperty {
  "Object metadata"
  _meta: simple__causeway_conf_ConfigurationProperty__gqlv_meta
  key: String!
  value: String!
}

type simple__causeway_conf_ConfigurationProperty__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__causeway_conf_ConfigurationViewmodel {
  "Object metadata"
  _meta: simple__causeway_conf_ConfigurationViewmodel__gqlv_meta
  "Environment"
  environment: [simple__causeway_conf_ConfigurationProperty]
  "Primary"
  primary: [simple__causeway_conf_ConfigurationProperty]
  "Secondary"
  secondary: [simple__causeway_conf_ConfigurationProperty]
}

type simple__causeway_conf_ConfigurationViewmodel__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__causeway_feat_ApplicationFeatureViewModel {
  "Object metadata"
  _meta: simple__causeway_feat_ApplicationFeatureViewModel__gqlv_meta
  memberName: String!
  namespaceName: String!
  typeSimpleName: String!
}

type simple__causeway_feat_ApplicationFeatureViewModel__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__causeway_feat_ApplicationNamespace {
  "Object metadata"
  _meta: simple__causeway_feat_ApplicationNamespace__gqlv_meta
  memberName: String!
  namespaceName: String!
  typeSimpleName: String!
}

type simple__causeway_feat_ApplicationNamespace__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__causeway_feat_ApplicationType {
  "Object metadata"
  _meta: simple__causeway_feat_ApplicationType__gqlv_meta
  "Actions"
  actions: [simple__causeway_feat_ApplicationTypeAction]
  "Collections"
  collections: [simple__causeway_feat_ApplicationTypeCollection]
  memberName: String!
  namespaceName: String!
  "Properties"
  properties: [simple__causeway_feat_ApplicationTypeProperty]
  typeSimpleName: String!
}

type simple__causeway_feat_ApplicationTypeAction {
  "Object metadata"
  _meta: simple__causeway_feat_ApplicationTypeAction__gqlv_meta
  actionSemantics: rich__causeway_applib_annotation_SemanticsOf__gqlv_enum!
  memberName: String!
  namespaceName: String!
  returnType: String!
  typeSimpleName: String!
}

type simple__causeway_feat_ApplicationTypeAction__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__causeway_feat_ApplicationTypeCollection {
  "Object metadata"
  _meta: simple__causeway_feat_ApplicationTypeCollection__gqlv_meta
  derived: Boolean!
  elementType: String!
  memberName: String!
  namespaceName: String!
  typeSimpleName: String!
}

type simple__causeway_feat_ApplicationTypeCollection__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__causeway_feat_ApplicationTypeMember {
  "Object metadata"
  _meta: simple__causeway_feat_ApplicationTypeMember__gqlv_meta
  memberName: String!
  namespaceName: String!
  typeSimpleName: String!
}

type simple__causeway_feat_ApplicationTypeMember__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__causeway_feat_ApplicationTypeProperty {
  "Object metadata"
  _meta: simple__causeway_feat_ApplicationTypeProperty__gqlv_meta
  derived: Boolean!
  maxLength: Int
  memberName: String!
  namespaceName: String!
  returnType: String!
  typeSimpleName: String!
  typicalLength: Int
}

type simple__causeway_feat_ApplicationTypeProperty__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__causeway_feat_ApplicationType__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__causeway_security_LoginRedirect {
  "Object metadata"
  _meta: simple__causeway_security_LoginRedirect__gqlv_meta
}

type simple__causeway_security_LoginRedirect__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__causeway_security_LogoutMenu {
  "Logout"
  logout: String
}

type simple__causeway_testing_fixtures_FixtureResult {
  "Object metadata"
  _meta: simple__causeway_testing_fixtures_FixtureResult__gqlv_meta
  className: String!
  fixtureScriptClassName: String
  key: String!
}

type simple__causeway_testing_fixtures_FixtureResult__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__java_lang_Record {
  "Object metadata"
  _meta: simple__java_lang_Record__gqlv_meta
}

type simple__java_lang_Record__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__java_lang_Runnable {
  "Object metadata"
  _meta: simple__java_lang_Runnable__gqlv_meta
}

type simple__java_lang_Runnable__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__java_util_concurrent_Callable {
  "Object metadata"
  _meta: simple__java_util_concurrent_Callable__gqlv_meta
}

type simple__java_util_concurrent_Callable__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__java_util_function_Consumer {
  "Object metadata"
  _meta: simple__java_util_function_Consumer__gqlv_meta
}

type simple__java_util_function_Consumer__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__java_util_function_Function {
  "Object metadata"
  _meta: simple__java_util_function_Function__gqlv_meta
}

type simple__java_util_function_Function__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__java_util_stream_Stream {
  "Object metadata"
  _meta: simple__java_util_stream_Stream__gqlv_meta
}

type simple__java_util_stream_Stream__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__org_apache_causeway_applib_graph_tree_MasterDetailTreeView {
  "Object metadata"
  _meta: simple__org_apache_causeway_applib_graph_tree_MasterDetailTreeView__gqlv_meta
  tree: String!
}

type simple__org_apache_causeway_applib_graph_tree_MasterDetailTreeView__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__org_apache_causeway_core_metamodel_inspect_model_MMNode {
  "Object metadata"
  _meta: simple__org_apache_causeway_core_metamodel_inspect_model_MMNode__gqlv_meta
  "Details"
  details: String
  "Put Details"
  putDetails(details: String!): String
  "Stream Child Nodes"
  streamChildNodes: simple__java_util_stream_Stream
}

type simple__org_apache_causeway_core_metamodel_inspect_model_MMNode__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript {
  "Object metadata"
  _meta: simple__org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript__gqlv_meta
  friendlyName: String!
  qualifiedName: String!
}

type simple__org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__university_admin_AdminMenu {
  "Action With Disabled Param"
  actionWithDisabledParam(firstParam: String!, secondParam: String!, thirdParameter: String!): String
  "Action With Hidden Param"
  actionWithHiddenParam(firstParam: String!, secondParam: String!): String
  "Admin Action"
  adminAction: String
  "Other Admin Action"
  otherAdminAction: String
}

type simple__university_calc_Calculator {
  "Add Big Decimals"
  addBigDecimals(x: String!, y: String): String
  "Add Big Integers"
  addBigIntegers(x: String!, y: String): String
  "Add Byte Wrappers"
  addByteWrappers(x: Byte!, y: Byte): Int
  "Add Bytes"
  addBytes(x: Byte!, y: Byte!): Byte
  "Add Double Wrappers"
  addDoubleWrappers(x: Float!, y: Float): Float
  "Add Doubles"
  addDoubles(x: Float!, y: Float!): Float
  "Add Float Wrappers"
  addFloatWrappers(x: Float!, y: Float): Float
  "Add Floats"
  addFloats(x: Float!, y: Float!): Float
  "Add Integer Wrappers"
  addIntegerWrappers(x: Int!, y: Int): Int
  "Add Integers"
  addIntegers(x: Int!, y: Int!): Int
  "Add Short Wrappers"
  addShortWrappers(x: Short!, y: Short): Short
  "Add Shorts"
  addShorts(x: Short!, y: Short!): Short
  "And"
  and(x: Boolean!, y: Boolean!): Boolean
  "Concat"
  concat(prefix: String!, suffix: String): String
  "Jdk 8 Local Plus Days"
  jdk8LocalPlusDays(date: String!, numDays: Int!): String
  "Jdk 8 Local Plus Hours And Minutes"
  jdk8LocalPlusHoursAndMinutes(numHours: Int!, numMinutes: Int!, time: String!): String
  "Jdk 8 Offset Plus Days And Hours And Minutes"
  jdk8OffsetPlusDaysAndHoursAndMinutes(dateTime: DateTime!, numDays: Int!, numHours: Int!, numMinutes: Int!): DateTime
  "Jdk 8 Offset Plus Hours And Minutes"
  jdk8OffsetPlusHoursAndMinutes(numHours: Int!, numMinutes: Int!, time: Time!): Time
  "Jdk 8 Zoned Plus Days And Hours And Minutes"
  jdk8ZonedPlusDaysAndHoursAndMinutes(dateTime: String!, numDays: Int!, numHours: Int!, numMinutes: Int!): String
  "Next Month"
  nextMonth(month: rich__org_apache_causeway_viewer_graphql_viewer_test_domain_calc_Month__gqlv_enum!): rich__org_apache_causeway_viewer_graphql_viewer_test_domain_calc_Month__gqlv_enum
  "Not"
  not(x: Boolean!): Boolean
  "Or"
  or(x: Boolean!, y: Boolean!): Boolean
  "Some Locale"
  someLocale: String
  "Some Url"
  someUrl: String
  "Some Uuid"
  someUuid: UUID
}

type simple__university_calc_I18nCalculator {
  "Concät"
  concat(a1: String!, a2: String!): String
}

type simple__university_calc_calculatorHyphenated {
  "Add Big Decimals"
  addBigDecimals(x: String!, y: String): String
  "Add Big Integers"
  addBigIntegers(x: String!, y: String): String
  "Add Byte Wrappers"
  addByteWrappers(x: Byte!, y: Byte): Int
  "Add Bytes"
  addBytes(x: Byte!, y: Byte!): Byte
  "Add Double Wrappers"
  addDoubleWrappers(x: Float!, y: Float): Float
  "Add Doubles"
  addDoubles(x: Float!, y: Float!): Float
  "Add Float Wrappers"
  addFloatWrappers(x: Float!, y: Float): Float
  "Add Floats"
  addFloats(x: Float!, y: Float!): Float
  "Add Integer Wrappers"
  addIntegerWrappers(x: Int!, y: Int): Int
  "Add Integers"
  addIntegers(x: Int!, y: Int!): Int
  "Add Short Wrappers"
  addShortWrappers(x: Short!, y: Short): Short
  "Add Shorts"
  addShorts(x: Short!, y: Short!): Short
  "And"
  and(x: Boolean!, y: Boolean!): Boolean
  "Concat"
  concat(prefix: String!, suffix: String): String
  "Local Date Plus Days"
  localDatePlusDays(date: String!, numDays: Int!): String
  "Local Date Time Plus Days And Hours And Minutes"
  localDateTimePlusDaysAndHoursAndMinutes(dateTime: String!, numDays: Int!, numHours: Int!, numMinutes: Int!): String
  "Local Time Plus Hours And Minutes"
  localTimePlusHoursAndMinutes(numHours: Int!, numMinutes: Int!, time: String!): String
  "Next Month"
  nextMonth(month: rich__org_apache_causeway_viewer_graphql_viewer_test_domain_calc_Month__gqlv_enum!): rich__org_apache_causeway_viewer_graphql_viewer_test_domain_calc_Month__gqlv_enum
  "Not"
  not(x: Boolean!): Boolean
  "Offset Date Time Plus Days And Hours And Minutes"
  offsetDateTimePlusDaysAndHoursAndMinutes(dateTime: DateTime!, numDays: Int!, numHours: Int!, numMinutes: Int!): DateTime
  "Offset Time Plus Hours And Minutes"
  offsetTimePlusHoursAndMinutes(numHours: Int!, numMinutes: Int!, time: Time!): Time
  "Or"
  or(x: Boolean!, y: Boolean!): Boolean
  "Some Locale"
  someLocale: String
  "Some Url"
  someUrl: String
  "Some Uuid"
  someUuid: UUID
  "Zoned Date Time Plus Days And Hours And Minutes"
  zonedDateTimePlusDaysAndHoursAndMinutes(dateTime: String!, numDays: Int!, numHours: Int!, numMinutes: Int!): String
}

"University department specializing in a field of study"
type simple__university_dept_Department {
  "Object metadata"
  _meta: simple__university_dept_Department__gqlv_meta
  "University department specializing in a field of study"
  addStaffMember(staffMember: simple__university_dept_StaffMember__gqlv_input!): simple__university_dept_Department
  "University department specializing in a field of study"
  addStaffMembers(staffMembers: [simple__university_dept_StaffMember__gqlv_input]): simple__university_dept_Department
  "University department specializing in a field of study"
  changeDeptHead(newDeptHead: simple__university_dept_DeptHead__gqlv_input!): simple__university_dept_Department
  "University department specializing in a field of study"
  changeName(newName: String!): simple__university_dept_Department
  deptHead: simple__university_dept_DeptHead
  name: String!
  "University department specializing in a field of study"
  removeStaffMember(staffMember: simple__university_dept_StaffMember__gqlv_input!): simple__university_dept_Department
  "Staff member of a university department, responsible for delivering lectures, tutorials, exam invigilation and candidate interviews"
  staffMembers: [simple__university_dept_StaffMember]
}

type simple__university_dept_Department__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
  version: String
}

type simple__university_dept_Departments {
  "University department specializing in a field of study"
  createDepartment(deptHead: simple__university_dept_DeptHead__gqlv_input, name: String!): simple__university_dept_Department
  "University department specializing in a field of study"
  findAllDepartments: [simple__university_dept_Department]
  "University department specializing in a field of study"
  findDepartmentByName(name: String!): simple__university_dept_Department
}

"Departmental head, responsible for curriculum, research, funding and staff"
type simple__university_dept_DeptHead {
  "Object metadata"
  _meta: simple__university_dept_DeptHead__gqlv_meta
  "Departmental head, responsible for curriculum, research, funding and staff"
  changeDepartment(department: simple__university_dept_Department__gqlv_input!): simple__university_dept_DeptHead
  "Departmental head, responsible for curriculum, research, funding and staff"
  changeName(newName: String!): simple__university_dept_DeptHead
  department: simple__university_dept_Department
  name: String
}

type simple__university_dept_DeptHead__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
  version: String
}

type simple__university_dept_DeptHeads {
  "Departmental head, responsible for curriculum, research, funding and staff"
  findAllHeads: [simple__university_dept_DeptHead]
  "Departmental head, responsible for curriculum, research, funding and staff"
  findHeadByName(name: String!): simple__university_dept_DeptHead
}

type simple__university_dept_People {
  "Find Named"
  findNamed(name: String!): simple__university_dept_Person
  "Name Of"
  nameOf(person: simple__university_dept_Person__gqlv_input!): String
}

type simple__university_dept_Person {
  "Object metadata"
  _meta: simple__university_dept_Person__gqlv_meta
  name: String!
}

type simple__university_dept_Person__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
}

type simple__university_dept_Staff {
  "Staff member of a university department, responsible for delivering lectures, tutorials, exam invigilation and candidate interviews"
  createStaffMember(department: simple__university_dept_Department__gqlv_input!, name: String!): simple__university_dept_StaffMember
  "Staff member of a university department, responsible for delivering lectures, tutorials, exam invigilation and candidate interviews"
  findAllStaffMembers: [simple__university_dept_StaffMember]
  "Staff member of a university department, responsible for delivering lectures, tutorials, exam invigilation and candidate interviews"
  findStaffMemberByName(name: String!): simple__university_dept_StaffMember
}

"Staff member of a university department, responsible for delivering lectures, tutorials, exam invigilation and candidate interviews"
type simple__university_dept_StaffMember {
  "Object metadata"
  _meta: simple__university_dept_StaffMember__gqlv_meta
  department: simple__university_dept_Department
  grade: rich__org_apache_causeway_viewer_graphql_viewer_test_domain_dept_Grade__gqlv_enum!
  name: String!
  photo: simple__university_dept_StaffMember__photo__gqlv_member
}

type simple__university_dept_StaffMember__gqlv_meta {
  cssClass: String
  grid: String
  icon: String
  id: String!
  layout: String
  logicalTypeName: String!
  saveAs(ref: String): String
  title: String!
  version: String
}

"Photo"
type simple__university_dept_StaffMember__photo__gqlv_member {
  bytes: String
  mimeType: String
  name: String
}

enum logicalTypeNames__gqlv_enum {
  "causeway.applib.DomainObjectList"
  causeway_applib_DomainObjectList
  "causeway.applib.MetamodelInspectView"
  causeway_applib_MetamodelInspectView
  "causeway.applib.RoleMemento"
  causeway_applib_RoleMemento
  "causeway.applib.UserMemento"
  causeway_applib_UserMemento
  "causeway.conf.ConfigurationProperty"
  causeway_conf_ConfigurationProperty
  "causeway.conf.ConfigurationViewmodel"
  causeway_conf_ConfigurationViewmodel
  "causeway.feat.ApplicationFeatureViewModel"
  causeway_feat_ApplicationFeatureViewModel
  "causeway.feat.ApplicationNamespace"
  causeway_feat_ApplicationNamespace
  "causeway.feat.ApplicationType"
  causeway_feat_ApplicationType
  "causeway.feat.ApplicationTypeAction"
  causeway_feat_ApplicationTypeAction
  "causeway.feat.ApplicationTypeCollection"
  causeway_feat_ApplicationTypeCollection
  "causeway.feat.ApplicationTypeMember"
  causeway_feat_ApplicationTypeMember
  "causeway.feat.ApplicationTypeProperty"
  causeway_feat_ApplicationTypeProperty
  "causeway.security.LoginRedirect"
  causeway_security_LoginRedirect
  "causeway.testing.fixtures.FixtureResult"
  causeway_testing_fixtures_FixtureResult
  "org.apache.causeway.applib.graph.tree.MasterDetailTreeView"
  org_apache_causeway_applib_graph_tree_MasterDetailTreeView
  "university.dept.Department"
  university_dept_Department
  "university.dept.DeptHead"
  university_dept_DeptHead
  "university.dept.StaffMember"
  university_dept_StaffMember
}

enum rich__causeway_applib_annotation_SemanticsOf__gqlv_enum {
  IDEMPOTENT
  IDEMPOTENT_ARE_YOU_SURE
  NON_IDEMPOTENT
  NON_IDEMPOTENT_ARE_YOU_SURE
  NOT_SPECIFIED
  SAFE
  SAFE_AND_REQUEST_CACHEABLE
}

enum rich__org_apache_causeway_applib_services_user_UserMemento_AuthenticationSource__gqlv_enum {
  DEFAULT
  EXTERNAL
}

enum rich__org_apache_causeway_viewer_graphql_viewer_test_domain_calc_Month__gqlv_enum {
  APRIL
  AUGUST
  DECEMBER
  FEBRUARY
  JANUARY
  JULY
  JUNE
  MARCH
  MAY
  NOVEMBER
  OCTOBER
  SEPTEMBER
}

enum rich__org_apache_causeway_viewer_graphql_viewer_test_domain_dept_Grade__gqlv_enum {
  LECTURER
  PROFESSOR
  READER
  RESEARCH_ASSISTANT
  SENIOR_LECTURER
}

"An 8-bit signed integer"
scalar Byte

"A slightly refined version of RFC-3339 compliant DateTime Scalar"
scalar DateTime

"A 16-bit signed integer"
scalar Short

"An RFC-3339 compliant Full Time Scalar"
scalar Time

"A universally unique identifier compliant UUID Scalar"
scalar UUID

input rich__causeway_applib_DomainObjectList__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__causeway_applib_MetamodelInspectView__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__causeway_applib_RoleMemento__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__causeway_applib_UserMemento__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__causeway_conf_ConfigurationProperty__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__causeway_conf_ConfigurationViewmodel__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__causeway_feat_ApplicationFeatureViewModel__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__causeway_feat_ApplicationNamespace__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__causeway_feat_ApplicationTypeAction__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__causeway_feat_ApplicationTypeCollection__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__causeway_feat_ApplicationTypeMember__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__causeway_feat_ApplicationTypeProperty__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__causeway_feat_ApplicationType__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__causeway_security_LoginRedirect__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__causeway_testing_fixtures_FixtureResult__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__java_lang_Record__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__java_lang_Runnable__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__java_util_concurrent_Callable__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__java_util_function_Consumer__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__java_util_function_Function__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__java_util_stream_Stream__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__org_apache_causeway_applib_graph_tree_MasterDetailTreeView__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__org_apache_causeway_core_metamodel_inspect_model_MMNode__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__university_dept_Department__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__university_dept_DeptHead__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__university_dept_Person__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input rich__university_dept_StaffMember__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__causeway_applib_DomainObjectList__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__causeway_applib_MetamodelInspectView__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__causeway_applib_RoleMemento__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__causeway_applib_UserMemento__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__causeway_conf_ConfigurationProperty__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__causeway_conf_ConfigurationViewmodel__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__causeway_feat_ApplicationFeatureViewModel__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__causeway_feat_ApplicationNamespace__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__causeway_feat_ApplicationTypeAction__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__causeway_feat_ApplicationTypeCollection__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__causeway_feat_ApplicationTypeMember__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__causeway_feat_ApplicationTypeProperty__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__causeway_feat_ApplicationType__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__causeway_security_LoginRedirect__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__causeway_testing_fixtures_FixtureResult__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__java_lang_Record__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__java_lang_Runnable__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__java_util_concurrent_Callable__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__java_util_function_Consumer__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__java_util_function_Function__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__java_util_stream_Stream__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__org_apache_causeway_applib_graph_tree_MasterDetailTreeView__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__org_apache_causeway_core_metamodel_inspect_model_MMNode__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__org_apache_causeway_testing_fixtures_applib_fixturescripts_FixtureScript__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__university_dept_Department__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__university_dept_DeptHead__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__university_dept_Person__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}

input simple__university_dept_StaffMember__gqlv_input {
  "Use either 'id' or 'ref'; looks up an entity from the persistent data store, or if a view model, then recreates using the id as a memento of the object's state"
  id: ID
  "If object identified by 'id', then optionally specifies concrete type.  This is only required if the parameter type defines a super class"
  logicalTypeName: logicalTypeNames__gqlv_enum
  "Use either 'ref' or 'id'; looks up an object previously saved to the execution context using 'saveAs(ref: ...)'"
  ref: String
}
